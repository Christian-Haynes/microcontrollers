C51 COMPILER V7.05   SMB_EXAMPLE                                                           11/19/2012 16:10:57 PAGE 1   


C51 COMPILER V7.05, COMPILATION OF MODULE SMB_EXAMPLE
OBJECT MODULE PLACED IN smb_example.OBJ
COMPILER INVOKED BY: C:\SiLabs\MCU\IDEfiles\C51\BIN\C51.exe smb_example.c DB OE BR

stmt level    source

   1          //------------------------------------------------------------------------------------
   2          //
   3          // Example code for interfacing a C8051F0xx to three EEPROMs via the SMBus.
   4          // Code assumes that three 16-bit address space EEPROMs are connected
   5          // on the SCL and SDA lines, and configured so that their slave addresses
   6          // are as follows:
   7          // CHIP_A = 1010000
   8          // CHIP_B = 1010001
   9          // CHIP_C = 1010010
  10          //
  11          // Slave and arbitration states are not defined.  Assume the CF000 is the only
  12          // master in the system.
  13          // Functions: SM_Send performs a 1-byte write to the specified EEPROM
  14          // SM_Receive performs a 1-byte read of the specified EEPROM address (both include
  15          // memory address references).
  16          //
  17          
  18          //------------------------------------------------------------------------------------
  19          // Global CONSTANTS
  20          //------------------------------------------------------------------------------------
  21          
  22          #define WRITE 0x00                  // SMBus WRITE command
  23          #define READ  0x01                  // SMBus READ command
  24          
  25          // Device addresses (7 bits, lsb is a don't care)
  26          #define CHIP_A 0xA0                 // Device address for chip A
  27          #define CHIP_B 0xA2                 // Device address for chip B
  28          #define CHIP_C 0xA4                 // Device address for chip C
  29          
  30          // SMBus states:
  31          // MT = Master Transmitter
  32          // MR = Master Receiver
  33          #define  SMB_BUS_ERROR  0x00        // (all modes) BUS ERROR
  34          #define  SMB_START      0x08        // (MT & MR) START transmitted
  35          #define  SMB_RP_START   0x10        // (MT & MR) repeated START
  36          #define  SMB_MTADDACK   0x18        // (MT) Slave address + W transmitted;
  37                                              //  ACK received
  38          #define  SMB_MTADDNACK  0x20        // (MT) Slave address + W transmitted;
  39                                              //  NACK received
  40          #define  SMB_MTDBACK    0x28        // (MT) data byte transmitted; ACK rec'vd
  41          #define  SMB_MTDBNACK   0x30        // (MT) data byte transmitted; NACK rec'vd
  42          #define  SMB_MTARBLOST  0x38        // (MT) arbitration lost
  43          #define  SMB_MRADDACK   0x40        // (MR) Slave address + R transmitted;
  44                                              //  ACK received
  45          #define  SMB_MRADDNACK  0x48        // (MR) Slave address + R transmitted;
  46                                              //  NACK received
  47          #define  SMB_MRDBACK    0x50        // (MR) data byte rec'vd; ACK transmitted
  48          #define  SMB_MRDBNACK   0x58        // (MR) data byte rec'vd; NACK transmitted
  49          
  50          
  51          //-----------------------------------------------------------------------------------
  52          //Global VARIABLES
  53          //-----------------------------------------------------------------------------------
  54          char COMMAND;                       // Holds the slave address + R/W bit for
  55                                              // use in the SMBus ISR.
C51 COMPILER V7.05   SMB_EXAMPLE                                                           11/19/2012 16:10:57 PAGE 2   

  56          
  57          char WORD;                          // Holds data to be transmitted by the SMBus
  58                                              // OR data that has just been received.
  59          
  60          char BYTE_NUMBER;                   // Used by ISR to check what data has just been
  61                                              // sent - High address byte, Low byte, or data
  62                                              // byte
  63          
  64          unsigned char HIGH_ADD, LOW_ADD;    // High & Low byte for EEPROM memory address
  65          
  66          bit SM_BUSY;                        // This bit is set when a send or receive
  67                                              // is started. It is cleared by the
  68                                              // ISR when the operation is finished.
  69          
  70          
  71          //------------------------------------------------------------------------------------
  72          // Function PROTOTYPES
  73          //------------------------------------------------------------------------------------
  74          
  75          void SMBus_ISR (void);
  76          void SM_Send (char chip_select, unsigned int byte_address, char out_byte);
  77          char SM_Receive (char chip_select, unsigned int byte_address);
  78          
  79          
  80          // SMBus byte write function-----------------------------------------------------
  81          // Writes a single byte at the specified memory location.
  82          //
  83          // out_byte = data byte to be written
  84          // byte_address = memory location to be written into (2 bytes)
  85          // chip_select = device address of EEPROM chip to be written to
  86          void SM_Send (char chip_select, unsigned int byte_address, char out_byte)
  87          {
  88   1         while (SM_BUSY);                          // Wait for SMBus to be free.
  89   1         SM_BUSY = 1;                              // Occupy SMBus (set to busy)
  90   1         SMB0CN = 0x44;                            // SMBus enabled,
*** ERROR C202 IN LINE 90 OF SMB_EXAMPLE.C: 'SMB0CN': undefined identifier
  91   1                                                   // ACK on acknowledge cycle
  92   1      
  93   1         BYTE_NUMBER = 2;                          // 2 address bytes.
  94   1         COMMAND = (chip_select | WRITE);          // Chip select + WRITE
  95   1      
  96   1         HIGH_ADD = ((byte_address >> 8) & 0x00FF);// Upper 8 address bits
  97   1         LOW_ADD = (byte_address & 0x00FF);        // Lower 8 address bits
  98   1      
  99   1         WORD = out_byte;                          // Data to be writen
 100   1         
 101   1         STO = 0;
*** ERROR C202 IN LINE 101 OF SMB_EXAMPLE.C: 'STO': undefined identifier
 102   1         STA = 1;                                  // Start transfer
*** ERROR C202 IN LINE 102 OF SMB_EXAMPLE.C: 'STA': undefined identifier
 103   1      
 104   1      }
 105          
 106          // SMBus random read function------------------------------------------------------
 107          // Reads 1 byte from the specified memory location.
 108          //
 109          // byte_address = memory address of byte to read
 110          // chip_select = device address of EEPROM to be read from
 111          char SM_Receive (char chip_select, unsigned int byte_address)
 112          {
 113   1         while (SM_BUSY);                          // Wait for bus to be free.
 114   1         SM_BUSY = 1;                              // Occupy SMBus (set to busy)
C51 COMPILER V7.05   SMB_EXAMPLE                                                           11/19/2012 16:10:57 PAGE 3   

 115   1         SMB0CN = 0x44;                            // SMBus enabled, ACK on acknowledge cycle
*** ERROR C202 IN LINE 115 OF SMB_EXAMPLE.C: 'SMB0CN': undefined identifier
 116   1      
 117   1         BYTE_NUMBER = 2;                          // 2 address bytes
 118   1         COMMAND = (chip_select | READ);           // Chip select + READ
 119   1      
 120   1         HIGH_ADD = ((byte_address >> 8) & 0x00FF);// Upper 8 address bits
 121   1         LOW_ADD = (byte_address & 0x00FF);        // Lower 8 address bits
 122   1         
 123   1         STO = 0;
*** ERROR C202 IN LINE 123 OF SMB_EXAMPLE.C: 'STO': undefined identifier
 124   1         STA = 1;                                  // Start transfer
*** ERROR C202 IN LINE 124 OF SMB_EXAMPLE.C: 'STA': undefined identifier
 125   1         while (SM_BUSY);                          // Wait for transfer to finish
 126   1         return WORD;
 127   1      }
 128          
 129          
 130          //------------------------------------------------------------------------------------
 131          // Interrupt Service Routine
 132          //------------------------------------------------------------------------------------
 133          
 134          
 135          // SMBus interrupt service routine:
 136          
 137          void SMBUS_ISR (void) interrupt 7
 138          {
 139   1         switch (SMB0STA){                   // Status code for the SMBus (SMB0STA register)
*** ERROR C202 IN LINE 139 OF SMB_EXAMPLE.C: 'SMB0STA': undefined identifier
 140   2      
 141   2            // Master Transmitter/Receiver: START condition transmitted.
 142   2            // The R/W bit of the COMMAND word sent after this state will
 143   2            // always be a zero (W) because for both read and write,
 144   2            // the memory address must be written first.
 145   2            case SMB_START:
 146   2               SMB0DAT = (COMMAND & 0xFE);   // Load address of the slave to be accessed.
*** ERROR C202 IN LINE 146 OF SMB_EXAMPLE.C: 'SMB0DAT': undefined identifier
 147   2               STA = 0;                      // Manually clear START bit
*** ERROR C202 IN LINE 147 OF SMB_EXAMPLE.C: 'STA': undefined identifier
 148   2               break;
 149   2      
 150   2            // Master Transmitter/Receiver: Repeated START condition transmitted.
 151   2            // This state should only occur during a read, after the memory address has been
 152   2            // sent and acknowledged.
 153   2            case SMB_RP_START:
 154   2               SMB0DAT = COMMAND;            // COMMAND should hold slave address + R.
*** ERROR C202 IN LINE 154 OF SMB_EXAMPLE.C: 'SMB0DAT': undefined identifier
 155   2               STA = 0;
*** ERROR C202 IN LINE 155 OF SMB_EXAMPLE.C: 'STA': undefined identifier
 156   2               break;
 157   2      
 158   2            // Master Transmitter: Slave address + WRITE transmitted.  ACK received.
 159   2            case SMB_MTADDACK:
 160   2               SMB0DAT = HIGH_ADD;           // Load high byte of memory address
*** ERROR C202 IN LINE 160 OF SMB_EXAMPLE.C: 'SMB0DAT': undefined identifier
 161   2                                             // to be written.
 162   2               break;
 163   2      
 164   2            // Master Transmitter: Slave address + WRITE transmitted.  NACK received.
 165   2            // The slave is not responding.  Send a STOP followed by a START to try again.
 166   2            case SMB_MTADDNACK:
 167   2               STO = 1;
C51 COMPILER V7.05   SMB_EXAMPLE                                                           11/19/2012 16:10:57 PAGE 4   

*** ERROR C202 IN LINE 167 OF SMB_EXAMPLE.C: 'STO': undefined identifier
 168   2               STA = 1;
*** ERROR C202 IN LINE 168 OF SMB_EXAMPLE.C: 'STA': undefined identifier
 169   2               break;
 170   2      
 171   2            // Master Transmitter: Data byte transmitted.  ACK received.
 172   2            // This state is used in both READ and WRITE operations.  Check BYTE_NUMBER
 173   2            // for memory address status - if only HIGH_ADD has been sent, load LOW_ADD.
 174   2            // If LOW_ADD has been sent, check COMMAND for R/W value to determine 
 175   2            // next state.
 176   2            case SMB_MTDBACK:
 177   2               switch (BYTE_NUMBER){
 178   3                  case 2:                    // If BYTE_NUMBER=2, only HIGH_ADD
 179   3                     SMB0DAT = LOW_ADD;      // has been sent.
*** ERROR C202 IN LINE 179 OF SMB_EXAMPLE.C: 'SMB0DAT': undefined identifier
 180   3                     BYTE_NUMBER--;          // Decrement for next time around.
 181   3                     break;
 182   3                  case 1:                    // If BYTE_NUMBER=1, LOW_ADD was just sent.
 183   3                     if (COMMAND & 0x01){    // If R/W=READ, sent repeated START.
 184   4                        STO = 0;
*** ERROR C202 IN LINE 184 OF SMB_EXAMPLE.C: 'STO': undefined identifier
 185   4                        STA = 1;
*** ERROR C202 IN LINE 185 OF SMB_EXAMPLE.C: 'STA': undefined identifier
 186   4      
 187   4                     } else { 
 188   4                        SMB0DAT = WORD;      // If R/W=WRITE, load byte to write.
*** ERROR C202 IN LINE 188 OF SMB_EXAMPLE.C: 'SMB0DAT': undefined identifier
 189   4                        BYTE_NUMBER--;
 190   4                     }
 191   3                     break;
 192   3                  default:                   // If BYTE_NUMBER=0, transfer is finished.
 193   3                     STO = 1;
*** ERROR C202 IN LINE 193 OF SMB_EXAMPLE.C: 'STO': undefined identifier
 194   3                     SM_BUSY = 0;            // Free SMBus
 195   3                  }
 196   2               break;
 197   2      
 198   2      
 199   2            // Master Transmitter: Data byte transmitted.  NACK received.
 200   2            // Slave not responding.  Send STOP followed by START to try again.
 201   2            case SMB_MTDBNACK:
 202   2               STO = 1;
*** ERROR C202 IN LINE 202 OF SMB_EXAMPLE.C: 'STO': undefined identifier
 203   2               STA = 1;
*** ERROR C202 IN LINE 203 OF SMB_EXAMPLE.C: 'STA': undefined identifier
 204   2               break;
 205   2      
 206   2            // Master Transmitter: Arbitration lost.
 207   2            // Should not occur.  If so, restart transfer.
 208   2            case SMB_MTARBLOST:
 209   2               STO = 1;
*** ERROR C202 IN LINE 209 OF SMB_EXAMPLE.C: 'STO': undefined identifier
 210   2               STA = 1;
*** ERROR C202 IN LINE 210 OF SMB_EXAMPLE.C: 'STA': undefined identifier
 211   2               break;
 212   2      
 213   2            // Master Receiver: Slave address + READ transmitted.  ACK received.
 214   2            // Set to transmit NACK after next transfer since it will be the last (only)
 215   2            // byte.
 216   2            case SMB_MRADDACK:
 217   2               AA = 0;                       // NACK sent on acknowledge cycle.
*** ERROR C202 IN LINE 217 OF SMB_EXAMPLE.C: 'AA': undefined identifier
C51 COMPILER V7.05   SMB_EXAMPLE                                                           11/19/2012 16:10:57 PAGE 5   

 218   2               break;
 219   2      
 220   2            // Master Receiver: Slave address + READ transmitted.  NACK received.
 221   2            // Slave not responding.  Send repeated start to try again.
 222   2            case SMB_MRADDNACK:
 223   2               STO = 0;
*** ERROR C202 IN LINE 223 OF SMB_EXAMPLE.C: 'STO': undefined identifier
 224   2               STA = 1;
*** ERROR C202 IN LINE 224 OF SMB_EXAMPLE.C: 'STA': undefined identifier
 225   2               break;
 226   2      
 227   2            // Data byte received.  ACK transmitted.
 228   2            // State should not occur because AA is set to zero in previous state.
 229   2            // Send STOP if state does occur.
 230   2            case SMB_MRDBACK:
 231   2               STO = 1;
*** ERROR C202 IN LINE 231 OF SMB_EXAMPLE.C: 'STO': undefined identifier
 232   2               SM_BUSY = 0;
 233   2               break;
 234   2      
 235   2            // Data byte received.  NACK transmitted.
 236   2            // Read operation has completed.  Read data register and send STOP.
 237   2            case SMB_MRDBNACK:
 238   2               WORD = SMB0DAT;
*** ERROR C202 IN LINE 238 OF SMB_EXAMPLE.C: 'SMB0DAT': undefined identifier
 239   2               STO = 1;
*** ERROR C202 IN LINE 239 OF SMB_EXAMPLE.C: 'STO': undefined identifier
 240   2               SM_BUSY = 0;                  // Free SMBus
 241   2               break;
 242   2      
 243   2            // All other status codes meaningless in this application. Reset communication.
 244   2            default:
 245   2               STO = 1;                      // Reset communication.
*** ERROR C202 IN LINE 245 OF SMB_EXAMPLE.C: 'STO': undefined identifier
 246   2               SM_BUSY = 0;
 247   2               break;
 248   2            }
 249   1      
 250   1         SI=0;                               // clear interrupt flag
*** ERROR C202 IN LINE 250 OF SMB_EXAMPLE.C: 'SI': undefined identifier
 251   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  31 ERROR(S)
