A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE     1


MACRO ASSEMBLER A51 V7.04a
OBJECT MODULE PLACED IN SMBus.OBJ
ASSEMBLER INVOKED BY: C:\SiLabs\MCU\IDEfiles\C51\BIN\a51.exe SMBus.asm XR GEN DB EP NOMOD51

LOC  OBJ            LINE     SOURCE

                       1     
                       2     
                       3     ;; void smbus_setup (void)
                       4     ;; void smbus_send (uint16 eepromaddr, uint8 len, uint8 xdata * buffer);
                       5     ;; void smbus_receive (uint16 eepromaddr, uint8 len, uint8 xdata * buffer);
                       6     
                       7     ;first argument   R7      R6 & R7, MSB in R6
                       8     ;second argument  R5      R4 & R5, MSB in R4
                       9     ;third argument   R3      R2 & R3, MSB in R2
                      10     
                      11     ;; after sending slave address (on write), send two-byte memory address (always)
                      12     ;; after sending memory address, 
                      13     ;;   if write, sending data transmitting 
                      14     ;;   if read, sending repeated start
                      15     
                      16     ;---------------------------------------------------------------------------------
                      17     ;
                      18     ; modified from code from SiLabs, Copyright 2001 
                      19     ;
                      20     ; Example code to interface a single 256-byte EEPROM to a C8051F00x via the SMBus
                      21     ; Code assumes a single EEPROM with  slave address 1010000 is connected on 
                      22     ; the SDA and SCL lines, and no other masters are on the bus.
                      23     ; 
                      24     ; The SEND routine performs a 1-byte write to the EEPROM.  This consists of (1) START, 
                      25     ; (2) slave address + W, (3) memory location byte write, and (4) a data byte write.
                      26     ; 
                      27     ; STEPS FOR WRITING TO EEPROM:
                      28     ;   1) Load slave address into SLA_ADD
                      29     ;   2) Load memory address into MEM_ADD
                      30     ;   3) Load data byte into TRANSMIT_BYTE. 
                      31     ;   4) Call SEND
                      32     ;
                      33     ; The RECEIVE routine performs a 1-byte read from the EEPROM. This consists of (1)
                      34     ; START, (2) slave address + W, (3) memory location byte write, (4) repeated START,
                      35     ; (5) slave address + R, (6) data byte read.
                      36     ;
                      37     ; STEPS FOR RECEIVING DATA:
                      38     ;   1) Load slave address into SLA_ADD
                      39     ;   2) Load memory address into MEM_ADD
                      40     ;   3) Call RECEIVE
                      41     ;   4) Read RECEIVE_BYTE
                      42     ;
                      43     ; The SMBus state table is broken into 8-byte state segments, allowing the SMBus 
                      44     ; status code (SMB0STA) to be used as a state index.  Note that this leaves only
                      45     ; 8 bytes of code space per SMBus state definition. As a result, certain tasks
                      46     ; have been altered to limit state definition lengths:
                      47     ;
                      48     ; 1) The SMB_MTDBACK state (Master transmitter, data byte sent, ACK received) is 
                      49     ; reduced to a bit-check and branch operation.  The branch is outside of the state 
                      50     ; table, so that a larger code segment may be executed for this state. 
                      51     ;
                      52     ; 2) Three data bytes are used for slave address storage: SLA_ADD, WRI_ADD, READ_ADD.
                      53     ; Rather than using bit-wise operations in the SMBus states, each transfer routine 
                      54     ; pre-loads the address values.  Since a RECEIVE includes both a WRITE and READ
                      55     ; transfer, two address bytes are necessary - WRI_ADD and READ_ADD.  SLA_ADD is used
                      56     ; as a generic slave chip select before a function call. 
                      57     ;
                      58     ; Note that SLA_ADD is equivalent to WRI_ADD, since WRI_ADD = SLA_ADD + W (W=0). 
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE     2

                      59     ; The two are left separate to clarify the demonstration.
                      60     ;
                      61     ;-----------------------------------------------------------------------------------
                      62     $nomod51 
                      63     
                      64     public SMBus_Setup, _SMBUS_SEND, _SMBUS_RECEIVE
                      65     
                      66     ;-----------------------------------------------------------------------------------
                      67     ; EQUATES
                      68     ;-----------------------------------------------------------------------------------
                      69     
                      70      ;$include (c8051f120.inc) ; Include register definition file.
                +1    71     
                +1    72     ;---------------------------------------------------------------------------
                +1    73     ; 
                +1    74     ; 
                +1    75     ;
                +1    76     ;
                +1    77     ; FILE NAME: C8051F120.INC
                +1    78     ; TARGET MCUs: C8051F120, F121, F122, F123, F124, F125, F126, F127
                +1    79     ; DESCRIPTION: Register/bit definitions for the C8051F120 product family.
                +1    80     ;
                +1    81     ; REVISION 1.6
                +1    82     ;
                +1    83     ;---------------------------------------------------------------------------
                +1    84     
                +1    85     ;REGISTER DEFINITIONS
                +1    86     ;
  0080          +1    87     P0             DATA 080H    ; PORT 0 LATCH
  0081          +1    88     SP             DATA 081H    ; STACK POINTER
  0082          +1    89     DPL            DATA 082H    ; DATA POINTER LOW BYTE
  0083          +1    90     DPH            DATA 083H    ; DATA POINTER HIGH BYTE
  0084          +1    91     SFRPAGE        DATA 084H    ; SFR PAGE SELECT
  0085          +1    92     SFRNEXT        DATA 085H    ; SFR STACK NEXT PAGE
  0086          +1    93     SFRLAST        DATA 086H    ; SFR STACK LAST PAGE
  0087          +1    94     PCON           DATA 087H    ; POWER CONTROL
  0088          +1    95     FLSTAT         DATA 088H    ; FLASH STATUS
  0088          +1    96     CPT0CN         DATA 088H    ; COMPARATOR 0 CONTROL
  0088          +1    97     CPT1CN         DATA 088H    ; COMPARATOR 1 CONTROL
  0088          +1    98     TCON           DATA 088H    ; TIMER/COUNTER CONTROL
  0089          +1    99     TMOD           DATA 089H    ; TIMER/COUNTER MODE
  0089          +1   100     CPT0MD         DATA 089H    ; COMPARATOR 0 CONFIGURATION
  0089          +1   101     CPT1MD         DATA 089H    ; COMPARATOR 1 CONFIGURATION
  0089          +1   102     PLL0CN         DATA 089H    ; PLL CONTROL
  008A          +1   103     OSCICN         DATA 08AH    ; INTERNAL OSCILLATOR CONTROL
  008A          +1   104     TL0            DATA 08AH    ; TIMER/COUNTER 0 LOW BYTE
  008B          +1   105     OSCICL         DATA 08BH    ; INTERNAL OSCILLATOR CALIBRATION
  008B          +1   106     TL1            DATA 08BH    ; TIMER/COUNTER 1 LOW BYTE
  008C          +1   107     OSCXCN         DATA 08CH    ; EXTERNAL OSCILLATOR CONTROL
  008C          +1   108     TH0            DATA 08CH    ; TIMER/COUNTER 0 HIGH BYTE
  008D          +1   109     TH1            DATA 08DH    ; TIMER/COUNTER 1 HIGH BYTE
  008D          +1   110     PLL0DIV        DATA 08DH    ; PLL DIVIDER
  008E          +1   111     CKCON          DATA 08EH    ; CLOCK CONTROL
  008E          +1   112     PLL0MUL        DATA 08EH    ; PLL MULTIPLIER
  008F          +1   113     PSCTL          DATA 08FH    ; FLASH WRITE/ERASE CONTROL
  008F          +1   114     PLL0FLT        DATA 08FH    ; PLL FILTER
  0090          +1   115     P1             DATA 090H    ; PORT 1 LATCH
  0091          +1   116     SSTA0          DATA 091H    ; UART 0 STATUS
  0091          +1   117     MAC0BL         DATA 091H    ; MAC0 B REGISTER LOW BYTE
  0092          +1   118     MAC0BH         DATA 092H    ; MAC0 B REGISTER HIGH BYTE
  0093          +1   119     MAC0ACC0       DATA 093H    ; MAC0 ACCUMULATOR BYTE 0
  0094          +1   120     MAC0ACC1       DATA 094H    ; MAC0 ACCUMULATOR BYTE 1
  0095          +1   121     MAC0ACC2       DATA 095H    ; MAC0 ACCUMULATOR BYTE 2
  0096          +1   122     SFRPGCN        DATA 096H    ; SFR PAGE CONTROL
  0096          +1   123     MAC0ACC3       DATA 096H    ; MAC0 ACCUMULATOR BYTE 3
  0097          +1   124     MAC0OVR        DATA 097H    ; MAC0 ACCUMULATOR OVERFLOW BYTE
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE     3

  0097          +1   125     CLKSEL         DATA 097H    ; SYSTEM CLOCK SELECT
  0098          +1   126     SCON0          DATA 098H    ; UART 0 CONTROL
  0098          +1   127     SCON1          DATA 098H    ; UART 1 CONTROL
  0099          +1   128     SBUF0          DATA 099H    ; UART 0 DATA BUFFER
  0099          +1   129     SBUF1          DATA 099H    ; UART 1 DATA BUFFER
  009A          +1   130     SPI0CFG        DATA 09AH    ; SPI CONFIGURATION
  009A          +1   131     CCH0MA         DATA 09AH    ; CACHE MISS ACCUMULATOR
  009B          +1   132     SPI0DAT        DATA 09BH    ; SPI DATA
  009C          +1   133     P4MDOUT        DATA 09CH    ; PORT 4 OUTPUT MODE CONFIGURATION
  009D          +1   134     P5MDOUT        DATA 09DH    ; PORT 5 OUTPUT MODE CONFIGURATION
  009D          +1   135     SPI0CKR        DATA 09DH    ; SPI CLOCK RATE CONTROL
  009E          +1   136     P6MDOUT        DATA 09EH    ; PORT 6 OUTPUT MODE CONFIGURATION
  009F          +1   137     P7MDOUT        DATA 09FH    ; PORT 7 OUTPUT MODE CONFIGURATION
  00A0          +1   138     P2             DATA 0A0H    ; PORT 2 LATCH
  00A1          +1   139     EMI0TC         DATA 0A1H    ; EMIF TIMING CONTROL
  00A1          +1   140     CCH0CN         DATA 0A1H    ; CACHE CONTROL
  00A2          +1   141     EMI0CN         DATA 0A2H    ; EMIF CONTROL
  00A2          +1   142     CCH0TN         DATA 0A2H    ; CACHE TUNING
  00A3          +1   143     EMI0CF         DATA 0A3H    ; EMIF CONFIGURATION
  00A3          +1   144     CCH0LC         DATA 0A3H    ; CACHE LOCK
  00A4          +1   145     P0MDOUT        DATA 0A4H    ; PORT 0 OUTPUT MODE CONFIGURATION
  00A5          +1   146     P1MDOUT        DATA 0A5H    ; PORT 1 OUTPUT MODE CONFIGURATION
  00A6          +1   147     P2MDOUT        DATA 0A6H    ; PORT 2 OUTPUT MODE CONFIGURATION
  00A7          +1   148     P3MDOUT        DATA 0A7H    ; PORT 3 OUTPUT MODE CONFIGURATION
  00A8          +1   149     IE             DATA 0A8H    ; INTERRUPT ENABLE
  00A9          +1   150     SADDR0         DATA 0A9H    ; UART 0 SLAVE ADDRESS
  00AD          +1   151     P1MDIN         DATA 0ADH    ; PORT 1 INPUT MODE
  00B0          +1   152     P3             DATA 0B0H    ; PORT 3 LATCH
  00B1          +1   153     PSBANK         DATA 0B1H    ; FLASH BANK SELECT
  00B7          +1   154     FLACL          DATA 0B7H    ; FLASH ACCESS LIMIT
  00B7          +1   155     FLSCL          DATA 0B7H    ; FLASH SCALE
  00B8          +1   156     IP             DATA 0B8H    ; INTERRUPT PRIORITY
  00B9          +1   157     SADEN0         DATA 0B9H    ; UART 0 SLAVE ADDRESS MASK
  00BA          +1   158     AMX0CF         DATA 0BAH    ; ADC0 MULTIPLEXER CONFIGURATION
  00BA          +1   159     AMX2CF         DATA 0BAH    ; ADC2 MULTIPLEXER CONFIGURATION
  00BB          +1   160     AMX0SL         DATA 0BBH    ; ADC0 MULTIPLEXER CHANNEL SELECT
  00BB          +1   161     AMX2SL         DATA 0BBH    ; ADC2 MULTIPLEXER CHANNEL SELECT
  00BC          +1   162     ADC0CF         DATA 0BCH    ; ADC0 CONFIGURATION
  00BC          +1   163     ADC2CF         DATA 0BCH    ; ADC2 CONFIGURATION
  00BE          +1   164     ADC0L          DATA 0BEH    ; ADC0 DATA WORD LOW BYTE
  00BE          +1   165     ADC2           DATA 0BEH    ; ADC2DATA WORD
  00BF          +1   166     ADC0H          DATA 0BFH    ; ADC0 DATA WORD HIGH BYTE
  00C0          +1   167     MAC0STA        DATA 0C0H    ; MAC0 STATUS
  00C0          +1   168     SMB0CN         DATA 0C0H    ; SMBUS CONTROL
  00C1          +1   169     MAC0AL         DATA 0C1H    ; MAC0 A REGISTER LOW BYTE
  00C1          +1   170     SMB0STA        DATA 0C1H    ; SMBUS STATUS
  00C2          +1   171     MAC0AH         DATA 0C2H    ; MAC0 A REGISTER HIGH BYTE
  00C2          +1   172     SMB0DAT        DATA 0C2H    ; SMBUS DATA
  00C3          +1   173     MAC0CF         DATA 0C3H    ; MAC0 CONFIGURATION REGISTER
  00C3          +1   174     SMB0ADR        DATA 0C3H    ; SMBUS SLAVE ADDRESS
  00C4          +1   175     ADC0GTL        DATA 0C4H    ; ADC0 GREATER-THAN LOW BYTE
  00C4          +1   176     ADC2GT         DATA 0C4H    ; ADC2 GREATER-THAN
  00C5          +1   177     ADC0GTH        DATA 0C5H    ; ADC0 GREATER-THAN HIGH BYTE
  00C6          +1   178     ADC0LTL        DATA 0C6H    ; ADC0 LESS-THAN LOW BYTE
  00C6          +1   179     ADC2LT         DATA 0C6H    ; ADC2 LESS-THAN
  00C7          +1   180     ADC0LTH        DATA 0C7H    ; ADC0 LESS-THAN HIGH BYTE
  00C8          +1   181     P4             DATA 0C8H    ; PORT 4 LATCH
  00C8          +1   182     TMR2CN         DATA 0C8H    ; TIMER/COUNTER 2 CONTROL
  00C8          +1   183     TMR3CN         DATA 0C8H    ; TIMER 3 CONTROL
  00C8          +1   184     TMR4CN         DATA 0C8H    ; TIMER/COUNTER 4 CONTROL
  00C9          +1   185     TMR2CF         DATA 0C9H    ; TIMER/COUNTER 2 CONFIGURATION
  00C9          +1   186     TMR3CF         DATA 0C9H    ; TIMER 3 CONFIGURATION
  00C9          +1   187     TMR4CF         DATA 0C9H    ; TIMER/COUNTER 4 CONFIGURATION
  00CA          +1   188     RCAP2L         DATA 0CAH    ; TIMER/COUNTER 2 CAPTURE/RELOAD LOW BYTE
  00CA          +1   189     RCAP3L         DATA 0CAH    ; TIMER 3 CAPTURE/RELOAD LOW BYTE
  00CA          +1   190     RCAP4L         DATA 0CAH    ; TIMER/COUNTER 4 CAPTURE/RELOAD LOW BYTE
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE     4

  00CB          +1   191     RCAP2H         DATA 0CBH    ; TIMER/COUNTER 2 CAPTURE/RELOAD HIGH BYTE
  00CB          +1   192     RCAP3H         DATA 0CBH    ; TIMER 3 CAPTURE/RELOAD HIGH BYTE
  00CB          +1   193     RCAP4H         DATA 0CBH    ; TIMER/COUNTER 4 CAPTURE/RELOAD HIGH BYTE
  00CC          +1   194     TMR2L          DATA 0CCH    ; TIMER/COUNTER 2 LOW BYTE
  00CC          +1   195     TMR3L          DATA 0CCH    ; TIMER 3 LOW BYTE
  00CC          +1   196     TMR4L          DATA 0CCH    ; TIMER/COUNTER 4 LOW BYTE
  00CD          +1   197     TMR2H          DATA 0CDH    ; TIMER/COUNTER 2 HIGH BYTE
  00CD          +1   198     TMR3H          DATA 0CDH    ; TIMER 3 HIGH BYTE
  00CD          +1   199     TMR4H          DATA 0CDH    ; TIMER/COUNTER 4 HIGH BYTE
  00CE          +1   200     MAC0RNDL       DATA 0CEH    ; MAC0 ROUNDING REGISTER LOW BYTE
  00CF          +1   201     MAC0RNDH       DATA 0CFH    ; MAC0 ROUNDING REGISTER HIGH BYTE
  00CF          +1   202     SMB0CR         DATA 0CFH    ; SMBUS CLOCK RATE
  00D0          +1   203     PSW            DATA 0D0H    ; PROGRAM STATUS WORD
  00D1          +1   204     REF0CN         DATA 0D1H    ; VOLTAGE REFERENCE CONTROL
  00D2          +1   205     DAC0L          DATA 0D2H    ; DAC0 LOW BYTE
  00D2          +1   206     DAC1L          DATA 0D2H    ; DAC1 LOW BYTE
  00D3          +1   207     DAC0H          DATA 0D3H    ; DAC0 HIGH BYTE
  00D3          +1   208     DAC1H          DATA 0D3H    ; DAC1 HIGH BYTE
  00D4          +1   209     DAC0CN         DATA 0D4H    ; DAC0 CONTROL
  00D4          +1   210     DAC1CN         DATA 0D4H    ; DAC1 CONTROL
  00D8          +1   211     P5             DATA 0D8H    ; PORT 5 LATCH
  00D8          +1   212     PCA0CN         DATA 0D8H    ; PCA CONTROL
  00D9          +1   213     PCA0MD         DATA 0D9H    ; PCA MODE
  00DA          +1   214     PCA0CPM0       DATA 0DAH    ; PCA MODULE 0 MODE
  00DB          +1   215     PCA0CPM1       DATA 0DBH    ; PCA MODULE 1 MODE REGISTER
  00DC          +1   216     PCA0CPM2       DATA 0DCH    ; PCA MODULE 2 MODE
  00DD          +1   217     PCA0CPM3       DATA 0DDH    ; PCA MODULE 3 MODE
  00DE          +1   218     PCA0CPM4       DATA 0DEH    ; PCA MODULE 4 MODE
  00DF          +1   219     PCA0CPM5       DATA 0DFH    ; PCA MODULE 5 MODE
  00E0          +1   220     ACC            DATA 0E0H    ; ACCUMULATOR
  00E1          +1   221     XBR0           DATA 0E1H    ; PORT I/O CROSSBAR CONTROL 0
  00E1          +1   222     PCA0CPL5       DATA 0E1H    ; PCA MODULE 5 CAPTURE/COMPARE LOW BYTE
  00E2          +1   223     PCA0CPH5       DATA 0E2H    ; PCA MODULE 5 CAPTURE/COMPARE HIGH BYTE
  00E2          +1   224     XBR1           DATA 0E2H    ; PORT I/O CROSSBAR CONTROL 1
  00E3          +1   225     XBR2           DATA 0E3H    ; PORT I/O CROSSBAR CONTROL 2
  00E6          +1   226     EIE1           DATA 0E6H    ; EXTENDED INTERRUPT ENABLE 1
  00E7          +1   227     EIE2           DATA 0E7H    ; EXTENDED INTERRUPT ENABLE 2
  00E8          +1   228     ADC0CN         DATA 0E8H    ; ADC0 CONTROL
  00E8          +1   229     ADC2CN         DATA 0E8H    ; ADC2 CONTROL
  00E8          +1   230     P6             DATA 0E8H    ; PORT 6 LATCH
  00E9          +1   231     PCA0CPL2       DATA 0E9H    ; PCA MODULE 2 CAPTURE/COMPARE LOW BYTE
  00EA          +1   232     PCA0CPH2       DATA 0EAH    ; PCA MODULE 2 CAPTURE/COMPARE HIGH BYTE
  00EB          +1   233     PCA0CPL3       DATA 0EBH    ; PCA MODULE 3 CAPTURE/COMPARE LOW BYTE
  00EC          +1   234     PCA0CPH3       DATA 0ECH    ; PCA MODULE 3 CAPTURE/COMPARE HIGH BYTE
  00ED          +1   235     PCA0CPL4       DATA 0EDH    ; PCA MODULE 4 CAPTURE/COMPARE LOW BYTE
  00EE          +1   236     PCA0CPH4       DATA 0EEH    ; PCA MODULE 4 CAPTURE/COMPARE HIGH BYTE
  00EF          +1   237     RSTSRC         DATA 0EFH    ; RESET SOURCE
  00F0          +1   238     B              DATA 0F0H    ; B REGISTER
  00F6          +1   239     EIP1           DATA 0F6H    ; EXTERNAL INTERRUPT PRIORITY 1
  00F7          +1   240     EIP2           DATA 0F7H    ; EXTERNAL INTERRUPT PRIORITY 2
  00F8          +1   241     P7             DATA 0F8H    ; PORT 7 LATCH
  00F8          +1   242     SPI0CN         DATA 0F8H    ; SPI CONTROL
  00F9          +1   243     PCA0L          DATA 0F9H    ; PCA COUNTER LOW BYTE
  00FA          +1   244     PCA0H          DATA 0FAH    ; PCA COUNTER HIGH BYTE
  00FB          +1   245     PCA0CPL0       DATA 0FBH    ; PCA MODULE 0 CAPTURE/COMPARE LOW BYTE
  00FC          +1   246     PCA0CPH0       DATA 0FCH    ; PCA MODULE 0 CAPTURE/COMPARE HIGH BYTE
  00FD          +1   247     PCA0CPL1       DATA 0FDH    ; PCA MODULE 1 CAPTURE/COMPARE LOW BYTE
  00FE          +1   248     PCA0CPH1       DATA 0FEH    ; PCA MODULE 1 CAPTURE/COMPARE HIGH BYTE
  00FF          +1   249     WDTCN          DATA 0FFH    ; WATCHDOG TIMER CONTROL
                +1   250     
                +1   251     ;
                +1   252     ;------------------------------------------------------------------------------
                +1   253     ;BIT DEFINITIONS
                +1   254     ;
                +1   255     ; TCON 088H
  008F          +1   256     TF1            BIT 08FH     ; TIMER 1 OVERFLOW FLAG
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE     5

  008E          +1   257     TR1            BIT 08EH     ; TIMER 1 ON/OFF CONTROL
  008D          +1   258     TF0            BIT 08DH     ; TIMER 0 OVERFLOW FLAG
  008C          +1   259     TR0            BIT 08CH     ; TIMER 0 ON/OFF CONTROL
  008B          +1   260     IE1            BIT 08BH     ; EXT. INTERRUPT 1 EDGE FLAG
  008A          +1   261     IT1            BIT 08AH     ; EXT. INTERRUPT 1 TYPE
  0089          +1   262     IE0            BIT 089H     ; EXT. INTERRUPT 0 EDGE FLAG
  0088          +1   263     IT0            BIT 088H     ; EXT. INTERRUPT 0 TYPE
                +1   264     
                +1   265     ; CPT0CN 088H
  008F          +1   266     CP0EN          BIT 08FH     ; COMPARATOR 0 ENABLE
  008E          +1   267     CP0OUT         BIT 08EH     ; COMPARATOR 0 OUTPUT
  008D          +1   268     CP0RIF         BIT 08DH     ; COMPARATOR 0 RISING EDGE INTERRUPT
  008C          +1   269     CP0FIF         BIT 08CH     ; COMPARATOR 0 FALLING EDGE INTERRUPT
  008B          +1   270     CP0HYP1        BIT 08BH     ; COMPARATOR 0 POSITIVE HYSTERISIS 1
  008A          +1   271     CP0HYP0        BIT 08AH     ; COMPARATOR 0 POSITIVE HYSTERISIS 0
  0089          +1   272     CP0HYN1        BIT 089H     ; COMPARATOR 0 NEGATIVE HYSTERISIS 1
  0088          +1   273     CP0HYN0        BIT 088H     ; COMPARATOR 0 NEGATIVE HYSTERISIS 0
                +1   274     
                +1   275     ; CPT1CN 088H
  008F          +1   276     CP1EN          BIT 08FH     ; COMPARATOR 1 ENABLE
  008E          +1   277     CP1OUT         BIT 08EH     ; COMPARATOR 1 OUTPUT
  008D          +1   278     CP1RIF         BIT 08DH     ; COMPARATOR 1 RISING EDGE INTERRUPT
  008C          +1   279     CP1FIF         BIT 08CH     ; COMPARATOR 1 FALLING EDGE INTERRUPT
  008B          +1   280     CP1HYP1        BIT 08BH     ; COMPARATOR 1 POSITIVE HYSTERISIS 1
  008A          +1   281     CP1HYP0        BIT 08AH     ; COMPARATOR 1 POSITIVE HYSTERISIS 0
  0089          +1   282     CP1HYN1        BIT 089H     ; COMPARATOR 1 NEGATIVE HYSTERISIS 1
  0088          +1   283     CP1HYN0        BIT 088H     ; COMPARATOR 1 NEGATIVE HYSTERISIS 0
                +1   284     
                +1   285     ; FLSTAT 088H
  0088          +1   286     FLHBUSY        BIT 088H     ; FLASH BUSY
                +1   287     
                +1   288     ; SCON0 098H
  009F          +1   289     SM00           BIT 09FH     ; UART 0 MODE 0
  009E          +1   290     SM10           BIT 09EH     ; UART 0 MODE 1
  009D          +1   291     SM20           BIT 09DH     ; UART 0 MULTIPROCESSOR EN
  009C          +1   292     REN0           BIT 09CH     ; UART 0 RX ENABLE
  009B          +1   293     TB80           BIT 09BH     ; UART 0 TX BIT 8
  009A          +1   294     RB80           BIT 09AH     ; UART 0 RX BIT 8
  0099          +1   295     TI0            BIT 099H     ; UART 0 TX INTERRUPT FLAG
  0098          +1   296     RI0            BIT 098H     ; UART 0 RX INTERRUPT FLAG
                +1   297     
                +1   298     ; SCON1 098H
  009F          +1   299     S1MODE         BIT 09FH     ; UART 1 MODE
  009D          +1   300     MCE1           BIT 09DH     ; UART 1 MCE
  009C          +1   301     REN1           BIT 09CH     ; UART 1 RX ENABLE
  009B          +1   302     TB81           BIT 09BH     ; UART 1 TX BIT 8
  009A          +1   303     RB81           BIT 09AH     ; UART 1 RX BIT 8
  0099          +1   304     TI1            BIT 099H     ; UART 1 TX INTERRUPT FLAG
  0098          +1   305     RI1            BIT 098H     ; UART 1 RX INTERRUPT FLAG
                +1   306     
                +1   307     ; IE 0A8H
  00AF          +1   308     EA             BIT 0AFH     ; GLOBAL INTERRUPT ENABLE
  00AD          +1   309     ET2            BIT 0ADH     ; TIMER 2 INTERRUPT ENABLE
  00AC          +1   310     ES0            BIT 0ACH     ; UART0 INTERRUPT ENABLE
  00AB          +1   311     ET1            BIT 0ABH     ; TIMER 1 INTERRUPT ENABLE
  00AA          +1   312     EX1            BIT 0AAH     ; EXTERNAL INTERRUPT 1 ENABLE
  00A9          +1   313     ET0            BIT 0A9H     ; TIMER 0 INTERRUPT ENABLE
  00A8          +1   314     EX0            BIT 0A8H     ; EXTERNAL INTERRUPT 0 ENABLE
                +1   315     
                +1   316     ; IP 0B8H
  00BD          +1   317     PT2            BIT 0BDH     ; TIMER 2 PRIORITY
  00BC          +1   318     PS             BIT 0BCH     ; SERIAL PORT PRIORITY
  00BB          +1   319     PT1            BIT 0BBH     ; TIMER 1 PRIORITY
  00BA          +1   320     PX1            BIT 0BAH     ; EXTERNAL INTERRUPT 1 PRIORITY
  00B9          +1   321     PT0            BIT 0B9H     ; TIMER 0 PRIORITY
  00B8          +1   322     PX0            BIT 0B8H     ; EXTERNAL INTERRUPT 0 PRIORITY
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE     6

                +1   323     
                +1   324     ; SMB0CN 0C0H
  00C7          +1   325     BUSY           BIT 0C7H     ; SMBUS 0 BUSY
  00C6          +1   326     ENSMB          BIT 0C6H     ; SMBUS 0 ENABLE
  00C5          +1   327     STA            BIT 0C5H     ; SMBUS 0 START FLAG
  00C4          +1   328     STO            BIT 0C4H     ; SMBUS 0 STOP FLAG
  00C3          +1   329     SI             BIT 0C3H     ; SMBUS 0 INTERRUPT PENDING FLAG
  00C2          +1   330     AA             BIT 0C2H     ; SMBUS 0 ASSERT/ACKNOWLEDGE FLAG
  00C1          +1   331     SMBFTE         BIT 0C1H     ; SMBUS 0 FREE TIMER ENABLE
  00C0          +1   332     SMBTOE         BIT 0C0H     ; SMBUS 0 TIMEOUT ENABLE
                +1   333     
                +1   334     ; MAC0STA 0C0H
  00C3          +1   335     MAC0HO         BIT 0C3H     ; MAC0 HARD OVERFLOW
  00C2          +1   336     MAC0Z          BIT 0C2H     ; MAC0 ZERO
  00C1          +1   337     MAC0SO         BIT 0C1H     ; MAC0 SOFT OVERFLOW
  00C0          +1   338     MAC0N          BIT 0C0H     ; MAC0 NEGATIVE
                +1   339     
                +1   340     ; TMR2CN 0C8H
  00CF          +1   341     TF2            BIT 0CFH     ; TIMER 2 OVERFLOW FLAG
  00CE          +1   342     EXF2           BIT 0CEH     ; TIMER 2 EXTERNAL FLAG
  00CB          +1   343     EXEN2          BIT 0CBH     ; TIMER 2 EXTERNAL ENABLE FLAG
  00CA          +1   344     TR2            BIT 0CAH     ; TIMER 2 ON/OFF CONTROL
  00C9          +1   345     CT2            BIT 0C9H     ; TIMER 2 COUNTER SELECT
  00C8          +1   346     CPRL2          BIT 0C8H     ; TIMER 2 CAPTURE SELECT
                +1   347     
                +1   348     ; TMR3CN 0C8H
  00CF          +1   349     TF3            BIT 0CFH     ; TIMER 3 OVERFLOW FLAG
  00CE          +1   350     EXF3           BIT 0CEH     ; TIMER 3 EXTERNAL FLAG
  00CB          +1   351     EXEN3          BIT 0CBH     ; TIMER 3 EXTERNAL ENABLE FLAG
  00CA          +1   352     TR3            BIT 0CAH     ; TIMER 3 ON/OFF CONTROL
  00C9          +1   353     CT3            BIT 0C9H     ; TIMER 3 COUNTER SELECT
  00C8          +1   354     CPRL3          BIT 0C8H     ; TIMER 3 CAPTURE SELECT
                +1   355     
                +1   356     ; TMR4CN 0C8H
  00CF          +1   357     TF4            BIT 0CFH     ; TIMER 4 OVERFLOW FLAG
  00CE          +1   358     EXF4           BIT 0CEH     ; TIMER 4 EXTERNAL FLAG
  00CB          +1   359     EXEN4          BIT 0CBH     ; TIMER 4 EXTERNAL ENABLE FLAG
  00CA          +1   360     TR4            BIT 0CAH     ; TIMER 4 ON/OFF CONTROL
  00C9          +1   361     CT4            BIT 0C9H     ; TIMER 4 COUNTER SELECT
  00C8          +1   362     CPRL4          BIT 0C8H     ; TIMER 4 CAPTURE SELECT
                +1   363     
                +1   364     ; PSW 0D0H
  00D7          +1   365     CY             BIT 0D7H     ; CARRY FLAG
  00D6          +1   366     AC             BIT 0D6H     ; AUXILIARY CARRY FLAG
  00D5          +1   367     F0             BIT 0D5H     ; USER FLAG 0
  00D4          +1   368     RS1            BIT 0D4H     ; REGISTER BANK SELECT 1
  00D3          +1   369     RS0            BIT 0D3H     ; REGISTER BANK SELECT 0
  00D2          +1   370     OV             BIT 0D2H     ; OVERFLOW FLAG
  00D1          +1   371     F1             BIT 0D1H     ; USER FLAG 1
  00D0          +1   372     P              BIT 0D0H     ; ACCUMULATOR PARITY FLAG
                +1   373     
                +1   374     ; PCA0CN 0D8H
  00DF          +1   375     CF             BIT 0DFH     ; PCA 0 COUNTER OVERFLOW FLAG
  00DE          +1   376     CR             BIT 0DEH     ; PCA 0 COUNTER RUN CONTROL BIT
  00DD          +1   377     CCF5           BIT 0DDH     ; PCA 0 MODULE 5 INTERRUPT FLAG
  00DC          +1   378     CCF4           BIT 0DCH     ; PCA 0 MODULE 4 INTERRUPT FLAG
  00DB          +1   379     CCF3           BIT 0DBH     ; PCA 0 MODULE 3 INTERRUPT FLAG
  00DA          +1   380     CCF2           BIT 0DAH     ; PCA 0 MODULE 2 INTERRUPT FLAG
  00D9          +1   381     CCF1           BIT 0D9H     ; PCA 0 MODULE 1 INTERRUPT FLAG
  00D8          +1   382     CCF0           BIT 0D8H     ; PCA 0 MODULE 0 INTERRUPT FLAG
                +1   383     
                +1   384     ; ADC0CN 0E8H
  00EF          +1   385     AD0EN          BIT 0EFH     ; ADC 0 ENABLE
  00EE          +1   386     AD0TM          BIT 0EEH     ; ADC 0 TRACK MODE
  00ED          +1   387     AD0INT         BIT 0EDH     ; ADC 0 EOC INTERRUPT FLAG
  00EC          +1   388     AD0BUSY        BIT 0ECH     ; ADC 0 BUSY FLAG
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE     7

  00EB          +1   389     AD0CM1         BIT 0EBH     ; ADC 0 CONVERT START MODE BIT 1
  00EA          +1   390     AD0CM0         BIT 0EAH     ; ADC 0 CONVERT START MODE BIT 0
  00E9          +1   391     AD0WINT        BIT 0E9H     ; ADC 0 WINDOW INTERRUPT FLAG
  00E8          +1   392     AD0LJST        BIT 0E8H     ; ADC 0 LEFT JUSTIFY DATA BIT
                +1   393     
                +1   394     ; ADC2CN 0E8H
  00EF          +1   395     AD2EN          BIT 0EFH     ; ADC 2 ENABLE
  00EE          +1   396     AD2TM          BIT 0EEH     ; ADC 2 TRACK MODE
  00ED          +1   397     AD2INT         BIT 0EDH     ; ADC 2 EOC INTERRUPT FLAG
  00EC          +1   398     AD2BUSY        BIT 0ECH     ; ADC 2 BUSY FLAG
  00EB          +1   399     AD2CM2         BIT 0EBH     ; ADC 2 CONVERT START MODE BIT 2
  00EA          +1   400     AD2CM1         BIT 0EAH     ; ADC 2 CONVERT START MODE BIT 1
  00E9          +1   401     AD2CM0         BIT 0E9H     ; ADC 2 CONVERT START MODE BIT 0
  00E8          +1   402     AD2WINT        BIT 0E8H     ; ADC 2 WINDOW INTERRUPT FLAG
                +1   403     
                +1   404     ; SPI0CN 0F8H
  00FF          +1   405     SPIF           BIT 0FFH     ; SPI 0 INTERRUPT FLAG
  00FE          +1   406     WCOL           BIT 0FEH     ; SPI 0 WRITE COLLISION FLAG
  00FD          +1   407     MODF           BIT 0FDH     ; SPI 0 MODE FAULT FLAG
  00FC          +1   408     RXOVRN         BIT 0FCH     ; SPI 0 RX OVERRUN FLAG
  00FB          +1   409     NSSMD1         BIT 0FBH     ; SPI 0 SLAVE SELECT MODE 1
  00FA          +1   410     NSSMD0         BIT 0FAH     ; SPI 0 SLAVE SELECT MODE 0
  00F9          +1   411     TXBMT          BIT 0F9H     ; SPI 0 TX BUFFER EMPTY FLAG
  00F8          +1   412     SPIEN          BIT 0F8H     ; SPI 0 SPI ENABLE
                +1   413     
                +1   414     ;
                +1   415     ;------------------------------------------------------------------------------
                +1   416     ; SFR PAGE DEFINITIONS
                +1   417     ;
  000F          +1   418     CONFIG_PAGE                 EQU 0FH   ; SYSTEM AND PORT CONFIGURATION PAGE
  0000          +1   419     LEGACY_PAGE                 EQU 00H   ; LEGACY SFR PAGE
  0000          +1   420     TIMER01_PAGE                EQU 00H   ; TIMER 0 AND TIMER 1
  0001          +1   421     CPT0_PAGE                   EQU 01H   ; COMPARATOR 0
  0002          +1   422     CPT1_PAGE                   EQU 02H   ; COMPARATOR 1
  0000          +1   423     UART0_PAGE                  EQU 00H   ; UART 0
  0001          +1   424     UART1_PAGE                  EQU 01H   ; UART 1
  0000          +1   425     SPI0_PAGE                   EQU 00H   ; SPI 0
  0000          +1   426     EMI0_PAGE                   EQU 00H   ; EXTERNAL MEMORY INTERFACE
  0000          +1   427     ADC0_PAGE                   EQU 00H   ; ADC 0
  0002          +1   428     ADC2_PAGE                   EQU 02H   ; ADC 2
  0000          +1   429     SMB0_PAGE                   EQU 00H   ; SMBUS 0
  0000          +1   430     TMR2_PAGE                   EQU 00H   ; TIMER 2
  0001          +1   431     TMR3_PAGE                   EQU 01H   ; TIMER 3
  0002          +1   432     TMR4_PAGE                   EQU 02H   ; TIMER 4
  0000          +1   433     DAC0_PAGE                   EQU 00H   ; DAC 0
  0001          +1   434     DAC1_PAGE                   EQU 01H   ; DAC 1
  0000          +1   435     PCA0_PAGE                   EQU 00H   ; PCA 0
  000F          +1   436     PLL0_PAGE                   EQU 0FH   ; PLL 0
  0003          +1   437     MAC0_PAGE                   EQU 03H   ; MAC 0
                +1   438     
                     439     
  00A0               440        WRI_ADD         EQU   0A0h      ; EEPROM slave address for write
  00A1               441        READ_ADD        EQU   0A1h      ; EEPROM slave address for read
                     442     
                     443        ; SMBus States
  0000               444        SMB_BUS_ERROR   EQU   00h         ; (all modes) BUS ERROR
  0008               445        SMB_START       EQU   08h         ; (MT & MR) START transmitted
  0010               446        SMB_RP_START    EQU   10h         ; (MT & MR) repeated START
  0018               447        SMB_MTADDACK    EQU   18h         ; (MT) Slave address + W transmitted;
                     448                                          ;  ACK received
  0020               449        SMB_MTADDNACK   EQU   20h         ; (MT) Slave address + W transmitted;
                     450                                          ;  NACK received
  0028               451        SMB_MTDBACK     EQU   28h         ; (MT) data byte transmitted; ACK rec'vd
  0030               452        SMB_MTDBNACK    EQU   30h         ; (MT) data byte transmitted; NACK rec'vd
  0038               453        SMB_MTARBLOST   EQU   38h         ; (MT) arbitration lost
  0040               454        SMB_MRADDACK    EQU   40h         ; (MR) Slave address + R transmitted;
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE     8

                     455                                          ;  ACK received
  0048               456        SMB_MRADDNACK   EQU   48h         ; (MR) Slave address + R transmitted;
                     457                                          ;  NACK received
  0050               458        SMB_MRDBACK     EQU   50h         ; (MR) data byte rec'vd; ACK transmitted
  0058               459        SMB_MRDBNACK    EQU   58h         ; (MR) data byte rec'vd; NACK transmitted
                     460     
                     461     
                     462     ;-----------------------------------------------------------------------------------
                     463     ; VARIABLES
                     464     ;-----------------------------------------------------------------------------------
                     465     
                     466     
                     467     SMBDATA     SEGMENT DATA            ; declare DATA segment
----                 468                 RSEG  SMBDATA            ; select DATA segment
                     469     
                     470     
0000                 471        MEMMSB_ADD:     DS    1           ; EEPROM memory location to be accessed
0001                 472        MEMLSB_ADD:     DS    1
0002                 473        bufmsb:         DS    1           ; external memory buffer address
0003                 474        buflsb:         DS    1
0004                 475        buflen:         DS    1           ; number of bytes to transfer
                     476         
                     477     SMBUSBITS      SEGMENT BIT
----                 478                 RSEG  SMBUSBITS
                     479     
0000                 480        RW:             DBIT  1           ; R/W command bit. 1=READ, 0=WRITE
0001                 481        SM_BUSY:        DBIT  1           ; SMBus Busy flag (kept in software)
0002                 482        NACK_STAT:                        ; Double-up the use of this bit; on
                     483                                          ; read, hold the NACK status after the
                     484                                          ; memory address is transmitted
0002                 485        MSB_SENT:       DBIT  1           ; Used to indicate address xmit state
0003                 486        LSB_SENT:       DBIT  1           ; MSB_SENT=1: just sent address MSB 
                     487                                          ; LSB_SENT=1: just sent address LSB 
                     488                                          ; LSB_SENT=0: sending data
                     489        
                     490     ;------------------------------------------------------------------------------------
                     491     ; INTERRUPT VECTOR
                     492     ;------------------------------------------------------------------------------------
                     493        
                     494     ; SMBus Interrupt Vector
----                 495                 CSEG AT 03BH
003B 020000   F      496         ljmp  SMBus_ISR
                     497     
                     498     SMBCODE     SEGMENT CODE
----                 499                 RSEG SMBCODE
                     500                 USING 0
                     501        
                     502     ;---------------------------------------------------------------------------------------
                     503     ; SUBROUTINES
                     504     ;---------------------------------------------------------------------------------------
                     505     
                     506     ;---------------------------------------------------------------------------------------
                     507     ; SMBus_Setup
                     508     ; SMbus setup routine: internal software only
                     509     
                     510     
0000                 511     SMBus_Setup:
0000 C200     F      512        clr   SM_BUSY        ; Clears SM_Busy flag for first transfer.
0002 22              513        ret
                     514     
                     515     ;---------------------------------------------------------------------------------------
                     516     ; SEND subroutine.  Assumes that the slave address, memory location, and transmit
                     517     ; data have all been loaded into their associated variables. This routine manages
                     518     ; the SM_BUSY bit, sets RW=WRITE, loads the WRI_ADD, and initiates the transfer.
                     519     ;
                     520     
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE     9

                     521     
                     522     ;;  memaddr: address in SMBus memory device
                     523     ;;        R6 & R7
                     524     ;;  len: number of bytes in buffer
                     525     ;;        R5
                     526     ;;  buffer: local buffer to read/write
                     527     ;;        R2 & R3
                     528     
0003                 529     _SMBUS_SEND:
0003 C0E0            530        push   ACC                        ; Preserve accumulator
0005 2000FD   F      531        jb     SM_BUSY, $                 ; Wait for SMBus to be free
0008 C200     F      532        clr    RW                         ; RW = 0 (WRITE)
                     533     
000A 8E00     F      534        mov    MEMMSB_ADD, R6
000C 8F00     F      535        mov    MEMLSB_ADD, R7
000E 8D00     F      536        mov    buflen, R5
0010 8A00     F      537        mov    bufmsb, R2
0012 8B00     F      538        mov    buflsb, R3
                     539     
0014 D200     F      540        setb   SM_BUSY                    ; Occupy SMBus
0016 D2C5            541        setb   STA                        ; Initiate Transfer
0018 D0E0            542        pop    ACC                        ; Restore accumulator
                     543     
001A 22              544        ret
                     545     
                     546     ;---------------------------------------------------------------------------------------
                     547     ; RECEIVE subroutine. Assumes that the slave address and memory location have been 
                     548     ; loaded into their associated variables. This routine manages the SM_BUSY bit, sets
                     549     ; RW=READ, loads the READ_ADD and WRI_ADD, and initiates the transfer.
                     550     ; 
                     551     ; Note that the RECEIVE transfer consists of a WRITE of the memory location to be accessed,
                     552     ; followed by a repeated START and a READ operation.  Therefore, both WRI_ADD
                     553     ; and READ_ADD are used by this routine.
001B                 554     _SMBUS_RECEIVE:
                     555     
001B C0E0            556        push  ACC                          ; Preserve accumulator
001D 2000FD   F      557        jb    SM_BUSY, $                   ; Wait for SMBus to be free
0020 D200     F      558        setb  RW                           ; RW = 1 (READ)
                     559     
0022 8E00     F      560        mov    MEMMSB_ADD, R6
0024 8F00     F      561        mov    MEMLSB_ADD, R7
0026 8D00     F      562        mov    buflen, R5
0028 8A00     F      563        mov    bufmsb, R2
002A 8B00     F      564        mov    buflsb, R3
                     565     
002C D200     F      566        setb  SM_BUSY                      ; Occupy SMBus
002E D2C5            567        setb  STA                          ; Initiate Transfer
                     568     
0030 2000FD   F      569        jb    SM_BUSY, $                   ; Wait for receive to finish
0033 D0E0            570        pop   ACC                          ; Restore accumulator
                     571     
0035 22              572        ret
                     573     
                     574     ;--------------------------------------------------------------------------------------
                     575     ; INTERRUPT VECTOR
                     576     ;--------------------------------------------------------------------------------------
                     577     
                     578     ;--------------------------------------------------------------------------------------
                     579     ; SMBus ISR
                     580     ;
                     581     ; Implemented as a state table lookup, with the SMBus status register as the index.
                     582     ; SMBus status codes are multiples of 8; thus the status code can be used to index
                     583     ; program segments that are spaced by 8 bytes. Each 'org' command indicates
                     584     ; a new state, offset from the beginning of the table by its status code value.
                     585     ; 
                     586     ; Note that only 8 bytes are available to process each state.  In the cases where
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE    10

                     587     ; more than 8 bytes are necessary, the code jumps to a program location outside
                     588     ; of the state table. This is only necessary in the state 'SMB_MTDBACK'.
                     589     
0036                 590     SMBus_ISR:
                     591     
0036 C0D0            592        push   PSW                         ;
0038 C0E0            593        push   ACC                         ;
003A C083            594        push   DPH                         ; Resource preservation
003C C082            595        push   DPL                         ;
                     596     
003E E5C1            597        mov   A, SMB0STA                   ; Load accumulator with current SMBus state.
                     598                                           ; State corresponds to the address offset
                     599                                           ; for each state execution
                     600     
0040 547F            601        anl   A, #7Fh                      ; Mask out upper bit, since any states that
                     602                                           ; set this bit are not defined in this code.
                     603     
0042 900000   F      604        mov   DPTR, #SMB_STATE_TABLE       ; Point DPTR to the beginning of the state table
0045 73              605        jmp   @A+DPTR                      ; Jump to the current state
                     606     
                     607     ; SMBus State Table------------------------------------------------------------------------
                     608     
0046                 609     SMB_STATE_TABLE:                  
                     610        
                     611        ; SMB_BUS_ERROR
                     612        ; All Modes: Bus Error
                     613        ; Reset hardware by setting STOP bit
0046                 614        org    SMB_STATE_TABLE + SMB_BUS_ERROR
                     615        
0046 D2C4            616           setb  STO
0048 020000   F      617           jmp   SMB_ISR_END               ; Jump to exit ISR
                     618     
                     619        ; SMB_START
                     620        ; Master Transmitter/Receiver: START transmitted.
                     621        ; The R/W bit will always be a zero (W) in this state because
                     622        ; for both write and read, the memory address must first be written.
004E                 623        org SMB_STATE_TABLE + SMB_START
                     624     
004E 75C2A0          625           mov   SMB0DAT, #WRI_ADD          ; Load slave address + W
0051 C2C5            626           clr   STA                       ; Manually clear START bit
0053 020000   F      627           jmp   SMB_ISR_END               ; Jump to exit ISR
                     628     
                     629        ; SMB_RP_START
                     630        ; Master Transmitter/Receiver: Repeated START transmitted.
                     631        ; This state should only occur during a read, after the memory 
                     632        ; address has been sent and acknowledged.
0056                 633        org    SMB_STATE_TABLE + SMB_RP_START
                     634     
0056 75C2A1          635           mov   SMB0DAT, #READ_ADD         ; Load slave address + R
0059 C2C5            636           clr   STA                       ; Manually clear START bit
005B 020000   F      637           jmp   SMB_ISR_END
                     638     
                     639        ; SMB_MTADDACK
                     640        ; Master Transmitter: Slave address + WRITE transmitted.
                     641        ; ACK received
005E                 642        org   SMB_STATE_TABLE + SMB_MTADDACK
                     643     
                     644     ; ### transmit MSB of memory address
005E 8500C2   F      645           mov   SMB0DAT, MEMMSB_ADD       ; Load memory address   
0061 D200     F      646           setb  MSB_SENT                  ; MSB_SENT=1: In the next ISR call,
                     647                                           ; the memory address will have just been
                     648                                           ; sent.                        
0063 020000   F      649           jmp   SMB_ISR_END
                     650     
                     651        ; SMB_MTADDNACK
                     652        ; Master Transmitter: Slave address + WRITE transmitted. 
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE    11

                     653        ; NACK received. The slave is not responding. Try again with
                     654        ; acknowledge polling. Send STOP + START.
0066                 655        org SMB_STATE_TABLE + SMB_MTADDNACK
                     656     
0066 D2C4            657           setb  STO                              
0068 D2C5            658           setb  STA
006A 020000   F      659           jmp   SMB_ISR_END
                     660     
                     661        ; SMB_MTDBACK
                     662        ; Master Transmitter: Data byte transmitted. ACK received.
                     663        ; This state is used in both read and write operations.
                     664        ; Check MSB_SENT and LSB_SENT
006E                 665        org    SMB_STATE_TABLE + SMB_MTDBACK
                     666        
006E 100050   F      667           jbc   MSB_SENT, ADDRMSB_SENT     ; If MSB_SENT=1, clear bit and
                     668                                            ; jump to send the first byte of
                     669                                            ; memory address
0071 100054   F      670           jbc   LSB_SENT, ADDRLSB_SENT     ; If LSB_SENT=1, clear bit and
                     671                                            ; jump to send the second byte of
                     672                                            ; memory address
0074 8055            673           jmp   SEND_BUFFER                ; otherwise send the data
                     674        
                     675        ; SMB_MTDBNACK
                     676        ; Master Transmitter: Data byte transmitted.  NACK received.
                     677        ; Slave not responding.  Send STOP followed by START to try again.
0076                 678        org SMB_STATE_TABLE + SMB_MTDBNACK
                     679     
0076 D2C4            680           setb  STO
0078 D2C5            681           setb  STA
007A 807B            682           jmp   SMB_ISR_END
                     683     
                     684        ; SMB_MTARBLOST
                     685        ; Master Transmitter: Arbitration Lost.
                     686        ; Should not occur.  If so, restart transfer.
007E                 687        org SMB_STATE_TABLE + SMB_MTARBLOST
                     688     
007E D2C4            689           setb  STO
0080 D2C5            690           setb  STA
0082 8073            691           jmp   SMB_ISR_END
                     692     
                     693        ; SMB_MRADDACK
                     694        ; Master Receiver: Slave address + READ transmitted. ACK received.
                     695        ; Set to transmit NACK after next transfer since it will be the
                     696        ; last (only) byte.
0086                 697        org SMB_STATE_TABLE + SMB_MRADDACK
                     698     
0086 A200     F      699           mov   c, NACK_STAT  ; get value for AA flag
0088 92C2            700           mov   AA, c
008A 806B            701           jmp   SMB_ISR_END
                     702     
                     703        ; SMB_MRADDNACK
                     704        ; Master Receiver: Slave address + READ transmitted. NACK received.
                     705        ; Slave not responding. Send repeated START to try again.
008E                 706        org SMB_STATE_TABLE + SMB_MRADDNACK
                     707           
008E C2C4            708           clr   STO
0090 D2C5            709           setb  STA
0092 8063            710           jmp   SMB_ISR_END
                     711     
                     712        ; SMB_MRDBACK
                     713        ; Master Receiver: Data byte received. ACK transmitted.
                     714        ; Should not occur because AA is cleared in previous state.
                     715        ; Send STOP if state does occur.
0096                 716        org SMB_STATE_TABLE + SMB_MRDBACK
                     717     
0096 800C            718                        jmp  SMB_store
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE    12

                     719     
                     720        ; SMB_MRDBNACK
                     721        ; Master Receiver: Data byte received. NACK transmitted.
                     722        ; Read operation completed. Read data register and send STOP
009E                 723        org SMB_STATE_TABLE + SMB_MRDBNACK
                     724        
009E D2C4            725           setb  STO
00A0 D2C2            726           setb  AA                       ; Set AA for next transfer
00A2 C200     F      727           clr   SM_BUSY   
                     728     ;;    jmp   SMB_store
                     729     
                     730     ; End of State Table--------------------------------------------------------------
                     731     
                     732     ;---------------------------------------------------------------------------------
                     733     ; Program segment to handle SMBus states that require more than 8 bytes of program
                     734     ; space.
                     735     
                     736     ; Data bytes being received.  Place into the buffer and determine when to send
                     737     ; the NACK
00A4                 738     SMB_store:
00A4 850083   F      739           mov   DPH, bufmsb               ; get buffer pointer
00A7 850082   F      740           mov   DPL, buflsb
00AA E5C2            741           mov   A, SMB0DAT                ; store received byte
00AC F0              742           movx  @DPTR, A
00AD A3              743           inc   DPTR                      ; update the pointer
00AE 858300   F      744           mov   bufmsb, DPH
00B1 858200   F      745           mov   buflsb, DPL
00B4 1500     F      746           dec   buflen                    ; adjust buffer count
00B6 20C43E          747           jb    STO, SMB_ISR_END
00B9 E500     F      748           mov   a, buflen                 ; if there is more than one
00BB 703A            749           jnz   SMB_ISR_END               ; byte left, send ACK
00BD C2C2            750           clr   AA
00BF 8036            751           jmp   SMB_ISR_END
                     752     
                     753     ; MSB Address byte has just been sent.  Now send LSB Address byte
00C1                 754     ADDRMSB_SENT:
00C1 8500C2   F      755           mov   SMB0DAT, MEMLSB_ADD       ; Load memory address   
00C4 D200     F      756           setb  LSB_SENT                  ; LSB_SENT=1: In the next ISR call,
                     757                                           ; the memory address will have just been
                     758                                           ; sent.                        
00C6 802F            759           jmp   SMB_ISR_END
                     760     
                     761     ; LSB Address byte has just been sent.  Check RW.  If R (1), jump to RW_READ.
                     762     ; If W, load data to transmit into SMB0DAT.
00C8                 763     ADDRLSB_SENT:
00C8 200018   F      764           jb    RW, RW_READ               ; this is a READ operation
                     765     
00CB                 766     SEND_BUFFER:
00CB E500     F      767           mov   A, buflen                 ; get buffer size
00CD 6022            768           jz    DATA_SENT                 ; if last byte transmitted, send STOP
00CF 850083   F      769           mov   DPH, bufmsb               ; get buffer pointer
00D2 850082   F      770           mov   DPL, buflsb
00D5 E0              771           movx  A,@DPTR                   ; get next piece of data
00D6 F5C2            772           mov   SMB0DAT, A                ; send it
00D8 A3              773           inc   DPTR                      ; increment pointer
00D9 858300   F      774           mov   bufmsb, DPH
00DC 858200   F      775           mov   buflsb, DPL
00DF 1500     F      776           dec   buflen                    ; count the byte
00E1 8014            777           jmp   SMB_ISR_END               ; Jump to exit ISR
                     778     
                     779     ; Operation is a READ, and the address byte has just been sent.  Send
                     780     ; repeated START to initiate memory read.
00E3                 781     RW_READ:
00E3 C2C4            782           clr   STO
00E5 D2C5            783           setb  STA                         ; Send repeated START
                     784     
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE    13

00E7 1500     F      785           dec   buflen
00E9 74FF            786           mov   a, #-1                      ; If there is only one byte to
00EB 2500     F      787           add   a, buflen                   ; transmit, send NACK after the
00ED 9200     F      788           mov   NACK_STAT, c                ; next data byte
00EF 8006            789           jmp   SMB_ISR_END                 ; Jump to exit ISR
                     790     
                     791     ; Operation is a WRITE, and the last data byte has just been sent.  Transfer
                     792     ; is finished.  Send STOP, free the bus, and exit the ISR.
00F1                 793     DATA_SENT:
                     794     
00F1 D2C4            795           setb  STO                         ; Send STOP and exit ISR.
00F3 C200     F      796           clr   SM_BUSY                     ; Free SMBus
00F5 8000            797           jmp   SMB_ISR_END                 ; Jump to exit ISR   
                     798     ;---------------------------------------------------------------------------------
                     799     
                     800     ; SMBus ISR exit. 
                     801     ; Restore registers, clear SI bit, and return from interrupt.   
00F7                 802     SMB_ISR_END:
                     803     
00F7 C2C3            804           clr   SI
00F9 D082            805           pop   DPL
00FB D083            806           pop   DPH
00FD D0E0            807           pop   ACC
00FF D0D0            808           pop   PSW
                     809     
0101 32              810           reti
                     811     
                     812     END
                             
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE    14

XREF SYMBOL TABLE LISTING
---- ------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES / REFERENCES

AA . . . . . . . .  B ADDR   00C0H.2 A      330# 700 726 750
AC . . . . . . . .  B ADDR   00D0H.6 A      366#
ACC. . . . . . . .  D ADDR   00E0H   A      220# 530 542 556 570 593 807
AD0BUSY. . . . . .  B ADDR   00E8H.4 A      388#
AD0CM0 . . . . . .  B ADDR   00E8H.2 A      390#
AD0CM1 . . . . . .  B ADDR   00E8H.3 A      389#
AD0EN. . . . . . .  B ADDR   00E8H.7 A      385#
AD0INT . . . . . .  B ADDR   00E8H.5 A      387#
AD0LJST. . . . . .  B ADDR   00E8H.0 A      392#
AD0TM. . . . . . .  B ADDR   00E8H.6 A      386#
AD0WINT. . . . . .  B ADDR   00E8H.1 A      391#
AD2BUSY. . . . . .  B ADDR   00E8H.4 A      398#
AD2CM0 . . . . . .  B ADDR   00E8H.1 A      401#
AD2CM1 . . . . . .  B ADDR   00E8H.2 A      400#
AD2CM2 . . . . . .  B ADDR   00E8H.3 A      399#
AD2EN. . . . . . .  B ADDR   00E8H.7 A      395#
AD2INT . . . . . .  B ADDR   00E8H.5 A      397#
AD2TM. . . . . . .  B ADDR   00E8H.6 A      396#
AD2WINT. . . . . .  B ADDR   00E8H.0 A      402#
ADC0CF . . . . . .  D ADDR   00BCH   A      162#
ADC0CN . . . . . .  D ADDR   00E8H   A      228#
ADC0GTH. . . . . .  D ADDR   00C5H   A      177#
ADC0GTL. . . . . .  D ADDR   00C4H   A      175#
ADC0H. . . . . . .  D ADDR   00BFH   A      166#
ADC0L. . . . . . .  D ADDR   00BEH   A      164#
ADC0LTH. . . . . .  D ADDR   00C7H   A      180#
ADC0LTL. . . . . .  D ADDR   00C6H   A      178#
ADC0_PAGE. . . . .  N NUMB   0000H   A      427#
ADC2 . . . . . . .  D ADDR   00BEH   A      165#
ADC2CF . . . . . .  D ADDR   00BCH   A      163#
ADC2CN . . . . . .  D ADDR   00E8H   A      229#
ADC2GT . . . . . .  D ADDR   00C4H   A      176#
ADC2LT . . . . . .  D ADDR   00C6H   A      179#
ADC2_PAGE. . . . .  N NUMB   0002H   A      428#
ADDRLSB_SENT . . .  C ADDR   00C8H   R   SEG=SMBCODE   670 763#
ADDRMSB_SENT . . .  C ADDR   00C1H   R   SEG=SMBCODE   667 754#
AMX0CF . . . . . .  D ADDR   00BAH   A      158#
AMX0SL . . . . . .  D ADDR   00BBH   A      160#
AMX2CF . . . . . .  D ADDR   00BAH   A      159#
AMX2SL . . . . . .  D ADDR   00BBH   A      161#
B. . . . . . . . .  D ADDR   00F0H   A      238#
BUFLEN . . . . . .  D ADDR   0004H   R   SEG=SMBDATA   475# 536 562 746 748 767 776 785 787
BUFLSB . . . . . .  D ADDR   0003H   R   SEG=SMBDATA   474# 538 564 740 745 770 775
BUFMSB . . . . . .  D ADDR   0002H   R   SEG=SMBDATA   473# 537 563 739 744 769 774
BUSY . . . . . . .  B ADDR   00C0H.7 A      325#
CCF0 . . . . . . .  B ADDR   00D8H.0 A      382#
CCF1 . . . . . . .  B ADDR   00D8H.1 A      381#
CCF2 . . . . . . .  B ADDR   00D8H.2 A      380#
CCF3 . . . . . . .  B ADDR   00D8H.3 A      379#
CCF4 . . . . . . .  B ADDR   00D8H.4 A      378#
CCF5 . . . . . . .  B ADDR   00D8H.5 A      377#
CCH0CN . . . . . .  D ADDR   00A1H   A      140#
CCH0LC . . . . . .  D ADDR   00A3H   A      144#
CCH0MA . . . . . .  D ADDR   009AH   A      131#
CCH0TN . . . . . .  D ADDR   00A2H   A      142#
CF . . . . . . . .  B ADDR   00D8H.7 A      375#
CKCON. . . . . . .  D ADDR   008EH   A      111#
CLKSEL . . . . . .  D ADDR   0097H   A      125#
CONFIG_PAGE. . . .  N NUMB   000FH   A      418#
CP0EN. . . . . . .  B ADDR   0088H.7 A      266#
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE    15

CP0FIF . . . . . .  B ADDR   0088H.4 A      269#
CP0HYN0. . . . . .  B ADDR   0088H.0 A      273#
CP0HYN1. . . . . .  B ADDR   0088H.1 A      272#
CP0HYP0. . . . . .  B ADDR   0088H.2 A      271#
CP0HYP1. . . . . .  B ADDR   0088H.3 A      270#
CP0OUT . . . . . .  B ADDR   0088H.6 A      267#
CP0RIF . . . . . .  B ADDR   0088H.5 A      268#
CP1EN. . . . . . .  B ADDR   0088H.7 A      276#
CP1FIF . . . . . .  B ADDR   0088H.4 A      279#
CP1HYN0. . . . . .  B ADDR   0088H.0 A      283#
CP1HYN1. . . . . .  B ADDR   0088H.1 A      282#
CP1HYP0. . . . . .  B ADDR   0088H.2 A      281#
CP1HYP1. . . . . .  B ADDR   0088H.3 A      280#
CP1OUT . . . . . .  B ADDR   0088H.6 A      277#
CP1RIF . . . . . .  B ADDR   0088H.5 A      278#
CPRL2. . . . . . .  B ADDR   00C8H.0 A      346#
CPRL3. . . . . . .  B ADDR   00C8H.0 A      354#
CPRL4. . . . . . .  B ADDR   00C8H.0 A      362#
CPT0CN . . . . . .  D ADDR   0088H   A      96#
CPT0MD . . . . . .  D ADDR   0089H   A      100#
CPT0_PAGE. . . . .  N NUMB   0001H   A      421#
CPT1CN . . . . . .  D ADDR   0088H   A      97#
CPT1MD . . . . . .  D ADDR   0089H   A      101#
CPT1_PAGE. . . . .  N NUMB   0002H   A      422#
CR . . . . . . . .  B ADDR   00D8H.6 A      376#
CT2. . . . . . . .  B ADDR   00C8H.1 A      345#
CT3. . . . . . . .  B ADDR   00C8H.1 A      353#
CT4. . . . . . . .  B ADDR   00C8H.1 A      361#
CY . . . . . . . .  B ADDR   00D0H.7 A      365#
DAC0CN . . . . . .  D ADDR   00D4H   A      209#
DAC0H. . . . . . .  D ADDR   00D3H   A      207#
DAC0L. . . . . . .  D ADDR   00D2H   A      205#
DAC0_PAGE. . . . .  N NUMB   0000H   A      433#
DAC1CN . . . . . .  D ADDR   00D4H   A      210#
DAC1H. . . . . . .  D ADDR   00D3H   A      208#
DAC1L. . . . . . .  D ADDR   00D2H   A      206#
DAC1_PAGE. . . . .  N NUMB   0001H   A      434#
DATA_SENT. . . . .  C ADDR   00F1H   R   SEG=SMBCODE   768 793#
DPH. . . . . . . .  D ADDR   0083H   A      90# 594 739 744 769 774 806
DPL. . . . . . . .  D ADDR   0082H   A      89# 595 740 745 770 775 805
EA . . . . . . . .  B ADDR   00A8H.7 A      308#
EIE1 . . . . . . .  D ADDR   00E6H   A      226#
EIE2 . . . . . . .  D ADDR   00E7H   A      227#
EIP1 . . . . . . .  D ADDR   00F6H   A      239#
EIP2 . . . . . . .  D ADDR   00F7H   A      240#
EMI0CF . . . . . .  D ADDR   00A3H   A      143#
EMI0CN . . . . . .  D ADDR   00A2H   A      141#
EMI0TC . . . . . .  D ADDR   00A1H   A      139#
EMI0_PAGE. . . . .  N NUMB   0000H   A      426#
ENSMB. . . . . . .  B ADDR   00C0H.6 A      326#
ES0. . . . . . . .  B ADDR   00A8H.4 A      310#
ET0. . . . . . . .  B ADDR   00A8H.1 A      313#
ET1. . . . . . . .  B ADDR   00A8H.3 A      311#
ET2. . . . . . . .  B ADDR   00A8H.5 A      309#
EX0. . . . . . . .  B ADDR   00A8H.0 A      314#
EX1. . . . . . . .  B ADDR   00A8H.2 A      312#
EXEN2. . . . . . .  B ADDR   00C8H.3 A      343#
EXEN3. . . . . . .  B ADDR   00C8H.3 A      351#
EXEN4. . . . . . .  B ADDR   00C8H.3 A      359#
EXF2 . . . . . . .  B ADDR   00C8H.6 A      342#
EXF3 . . . . . . .  B ADDR   00C8H.6 A      350#
EXF4 . . . . . . .  B ADDR   00C8H.6 A      358#
F0 . . . . . . . .  B ADDR   00D0H.5 A      367#
F1 . . . . . . . .  B ADDR   00D0H.1 A      371#
FLACL. . . . . . .  D ADDR   00B7H   A      154#
FLHBUSY. . . . . .  B ADDR   0088H.0 A      286#
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE    16

FLSCL. . . . . . .  D ADDR   00B7H   A      155#
FLSTAT . . . . . .  D ADDR   0088H   A      95#
IE . . . . . . . .  D ADDR   00A8H   A      149#
IE0. . . . . . . .  B ADDR   0088H.1 A      262#
IE1. . . . . . . .  B ADDR   0088H.3 A      260#
IP . . . . . . . .  D ADDR   00B8H   A      156#
IT0. . . . . . . .  B ADDR   0088H.0 A      263#
IT1. . . . . . . .  B ADDR   0088H.2 A      261#
LEGACY_PAGE. . . .  N NUMB   0000H   A      419#
LSB_SENT . . . . .  B ADDR   0000H.3 R   SEG=SMBUSBITS   486# 670 756
MAC0ACC0 . . . . .  D ADDR   0093H   A      119#
MAC0ACC1 . . . . .  D ADDR   0094H   A      120#
MAC0ACC2 . . . . .  D ADDR   0095H   A      121#
MAC0ACC3 . . . . .  D ADDR   0096H   A      123#
MAC0AH . . . . . .  D ADDR   00C2H   A      171#
MAC0AL . . . . . .  D ADDR   00C1H   A      169#
MAC0BH . . . . . .  D ADDR   0092H   A      118#
MAC0BL . . . . . .  D ADDR   0091H   A      117#
MAC0CF . . . . . .  D ADDR   00C3H   A      173#
MAC0HO . . . . . .  B ADDR   00C0H.3 A      335#
MAC0N. . . . . . .  B ADDR   00C0H.0 A      338#
MAC0OVR. . . . . .  D ADDR   0097H   A      124#
MAC0RNDH . . . . .  D ADDR   00CFH   A      201#
MAC0RNDL . . . . .  D ADDR   00CEH   A      200#
MAC0SO . . . . . .  B ADDR   00C0H.1 A      337#
MAC0STA. . . . . .  D ADDR   00C0H   A      167#
MAC0Z. . . . . . .  B ADDR   00C0H.2 A      336#
MAC0_PAGE. . . . .  N NUMB   0003H   A      437#
MCE1 . . . . . . .  B ADDR   0098H.5 A      300#
MEMLSB_ADD . . . .  D ADDR   0001H   R   SEG=SMBDATA   472# 535 561 755
MEMMSB_ADD . . . .  D ADDR   0000H   R   SEG=SMBDATA   471# 534 560 645
MODF . . . . . . .  B ADDR   00F8H.5 A      407#
MSB_SENT . . . . .  B ADDR   0000H.2 R   SEG=SMBUSBITS   485# 646 667
NACK_STAT. . . . .  B ADDR   0000H.2 R   SEG=SMBUSBITS   482# 699 788
NSSMD0 . . . . . .  B ADDR   00F8H.2 A      410#
NSSMD1 . . . . . .  B ADDR   00F8H.3 A      409#
OSCICL . . . . . .  D ADDR   008BH   A      105#
OSCICN . . . . . .  D ADDR   008AH   A      103#
OSCXCN . . . . . .  D ADDR   008CH   A      107#
OV . . . . . . . .  B ADDR   00D0H.2 A      370#
P. . . . . . . . .  B ADDR   00D0H.0 A      372#
P0 . . . . . . . .  D ADDR   0080H   A      87#
P0MDOUT. . . . . .  D ADDR   00A4H   A      145#
P1 . . . . . . . .  D ADDR   0090H   A      115#
P1MDIN . . . . . .  D ADDR   00ADH   A      151#
P1MDOUT. . . . . .  D ADDR   00A5H   A      146#
P2 . . . . . . . .  D ADDR   00A0H   A      138#
P2MDOUT. . . . . .  D ADDR   00A6H   A      147#
P3 . . . . . . . .  D ADDR   00B0H   A      152#
P3MDOUT. . . . . .  D ADDR   00A7H   A      148#
P4 . . . . . . . .  D ADDR   00C8H   A      181#
P4MDOUT. . . . . .  D ADDR   009CH   A      133#
P5 . . . . . . . .  D ADDR   00D8H   A      211#
P5MDOUT. . . . . .  D ADDR   009DH   A      134#
P6 . . . . . . . .  D ADDR   00E8H   A      230#
P6MDOUT. . . . . .  D ADDR   009EH   A      136#
P7 . . . . . . . .  D ADDR   00F8H   A      241#
P7MDOUT. . . . . .  D ADDR   009FH   A      137#
PCA0CN . . . . . .  D ADDR   00D8H   A      212#
PCA0CPH0 . . . . .  D ADDR   00FCH   A      246#
PCA0CPH1 . . . . .  D ADDR   00FEH   A      248#
PCA0CPH2 . . . . .  D ADDR   00EAH   A      232#
PCA0CPH3 . . . . .  D ADDR   00ECH   A      234#
PCA0CPH4 . . . . .  D ADDR   00EEH   A      236#
PCA0CPH5 . . . . .  D ADDR   00E2H   A      223#
PCA0CPL0 . . . . .  D ADDR   00FBH   A      245#
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE    17

PCA0CPL1 . . . . .  D ADDR   00FDH   A      247#
PCA0CPL2 . . . . .  D ADDR   00E9H   A      231#
PCA0CPL3 . . . . .  D ADDR   00EBH   A      233#
PCA0CPL4 . . . . .  D ADDR   00EDH   A      235#
PCA0CPL5 . . . . .  D ADDR   00E1H   A      222#
PCA0CPM0 . . . . .  D ADDR   00DAH   A      214#
PCA0CPM1 . . . . .  D ADDR   00DBH   A      215#
PCA0CPM2 . . . . .  D ADDR   00DCH   A      216#
PCA0CPM3 . . . . .  D ADDR   00DDH   A      217#
PCA0CPM4 . . . . .  D ADDR   00DEH   A      218#
PCA0CPM5 . . . . .  D ADDR   00DFH   A      219#
PCA0H. . . . . . .  D ADDR   00FAH   A      244#
PCA0L. . . . . . .  D ADDR   00F9H   A      243#
PCA0MD . . . . . .  D ADDR   00D9H   A      213#
PCA0_PAGE. . . . .  N NUMB   0000H   A      435#
PCON . . . . . . .  D ADDR   0087H   A      94#
PLL0CN . . . . . .  D ADDR   0089H   A      102#
PLL0DIV. . . . . .  D ADDR   008DH   A      110#
PLL0FLT. . . . . .  D ADDR   008FH   A      114#
PLL0MUL. . . . . .  D ADDR   008EH   A      112#
PLL0_PAGE. . . . .  N NUMB   000FH   A      436#
PS . . . . . . . .  B ADDR   00B8H.4 A      318#
PSBANK . . . . . .  D ADDR   00B1H   A      153#
PSCTL. . . . . . .  D ADDR   008FH   A      113#
PSW. . . . . . . .  D ADDR   00D0H   A      203# 592 808
PT0. . . . . . . .  B ADDR   00B8H.1 A      321#
PT1. . . . . . . .  B ADDR   00B8H.3 A      319#
PT2. . . . . . . .  B ADDR   00B8H.5 A      317#
PX0. . . . . . . .  B ADDR   00B8H.0 A      322#
PX1. . . . . . . .  B ADDR   00B8H.2 A      320#
RB80 . . . . . . .  B ADDR   0098H.2 A      294#
RB81 . . . . . . .  B ADDR   0098H.2 A      303#
RCAP2H . . . . . .  D ADDR   00CBH   A      191#
RCAP2L . . . . . .  D ADDR   00CAH   A      188#
RCAP3H . . . . . .  D ADDR   00CBH   A      192#
RCAP3L . . . . . .  D ADDR   00CAH   A      189#
RCAP4H . . . . . .  D ADDR   00CBH   A      193#
RCAP4L . . . . . .  D ADDR   00CAH   A      190#
READ_ADD . . . . .  N NUMB   00A1H   A      441# 635
REF0CN . . . . . .  D ADDR   00D1H   A      204#
REN0 . . . . . . .  B ADDR   0098H.4 A      292#
REN1 . . . . . . .  B ADDR   0098H.4 A      301#
RI0. . . . . . . .  B ADDR   0098H.0 A      296#
RI1. . . . . . . .  B ADDR   0098H.0 A      305#
RS0. . . . . . . .  B ADDR   00D0H.3 A      369#
RS1. . . . . . . .  B ADDR   00D0H.4 A      368#
RSTSRC . . . . . .  D ADDR   00EFH   A      237#
RW . . . . . . . .  B ADDR   0000H.0 R   SEG=SMBUSBITS   480# 532 558 764
RW_READ. . . . . .  C ADDR   00E3H   R   SEG=SMBCODE   764 781#
RXOVRN . . . . . .  B ADDR   00F8H.4 A      408#
S1MODE . . . . . .  B ADDR   0098H.7 A      299#
SADDR0 . . . . . .  D ADDR   00A9H   A      150#
SADEN0 . . . . . .  D ADDR   00B9H   A      157#
SBUF0. . . . . . .  D ADDR   0099H   A      128#
SBUF1. . . . . . .  D ADDR   0099H   A      129#
SCON0. . . . . . .  D ADDR   0098H   A      126#
SCON1. . . . . . .  D ADDR   0098H   A      127#
SEND_BUFFER. . . .  C ADDR   00CBH   R   SEG=SMBCODE   673 766#
SFRLAST. . . . . .  D ADDR   0086H   A      93#
SFRNEXT. . . . . .  D ADDR   0085H   A      92#
SFRPAGE. . . . . .  D ADDR   0084H   A      91#
SFRPGCN. . . . . .  D ADDR   0096H   A      122#
SI . . . . . . . .  B ADDR   00C0H.3 A      329# 804
SM00 . . . . . . .  B ADDR   0098H.7 A      289#
SM10 . . . . . . .  B ADDR   0098H.6 A      290#
SM20 . . . . . . .  B ADDR   0098H.5 A      291#
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE    18

SMB0ADR. . . . . .  D ADDR   00C3H   A      174#
SMB0CN . . . . . .  D ADDR   00C0H   A      168#
SMB0CR . . . . . .  D ADDR   00CFH   A      202#
SMB0DAT. . . . . .  D ADDR   00C2H   A      172# 625 635 645 741 755 772
SMB0STA. . . . . .  D ADDR   00C1H   A      170# 597
SMB0_PAGE. . . . .  N NUMB   0000H   A      429#
SMBCODE. . . . . .  C SEG    0102H       REL=UNIT   498# 499
SMBDATA. . . . . .  D SEG    0005H       REL=UNIT   467# 468
SMBFTE . . . . . .  B ADDR   00C0H.1 A      331#
SMBTOE . . . . . .  B ADDR   00C0H.0 A      332#
SMBUSBITS. . . . .  B SEG    0004H       REL=UNIT   477# 478
SMBUS_ISR. . . . .  C ADDR   0036H   R   SEG=SMBCODE   496 590#
SMBUS_SETUP. . . .  C ADDR   0000H   R   SEG=SMBCODE   64 511#
SMB_BUS_ERROR. . .  N NUMB   0000H   A      444# 614
SMB_ISR_END. . . .  C ADDR   00F7H   R   SEG=SMBCODE   617 627 637 649 659 682 691 701 710 747 749 751 759 777 789
                                           797 802#
SMB_MRADDACK . . .  N NUMB   0040H   A      454# 697
SMB_MRADDNACK. . .  N NUMB   0048H   A      456# 706
SMB_MRDBACK. . . .  N NUMB   0050H   A      458# 716
SMB_MRDBNACK . . .  N NUMB   0058H   A      459# 723
SMB_MTADDACK . . .  N NUMB   0018H   A      447# 642
SMB_MTADDNACK. . .  N NUMB   0020H   A      449# 655
SMB_MTARBLOST. . .  N NUMB   0038H   A      453# 687
SMB_MTDBACK. . . .  N NUMB   0028H   A      451# 665
SMB_MTDBNACK . . .  N NUMB   0030H   A      452# 678
SMB_RP_START . . .  N NUMB   0010H   A      446# 633
SMB_START. . . . .  N NUMB   0008H   A      445# 623
SMB_STATE_TABLE. .  C ADDR   0046H   R   SEG=SMBCODE   604 609# 614 623 633 642 655 665 678 687 697 706 716 723
SMB_STORE. . . . .  C ADDR   00A4H   R   SEG=SMBCODE   718 738#
SM_BUSY. . . . . .  B ADDR   0000H.1 R   SEG=SMBUSBITS   481# 512 531 540 557 566 569 727 796
SP . . . . . . . .  D ADDR   0081H   A      88#
SPI0CFG. . . . . .  D ADDR   009AH   A      130#
SPI0CKR. . . . . .  D ADDR   009DH   A      135#
SPI0CN . . . . . .  D ADDR   00F8H   A      242#
SPI0DAT. . . . . .  D ADDR   009BH   A      132#
SPI0_PAGE. . . . .  N NUMB   0000H   A      425#
SPIEN. . . . . . .  B ADDR   00F8H.0 A      412#
SPIF . . . . . . .  B ADDR   00F8H.7 A      405#
SSTA0. . . . . . .  D ADDR   0091H   A      116#
STA. . . . . . . .  B ADDR   00C0H.5 A      327# 541 567 626 636 658 681 690 709 783
STO. . . . . . . .  B ADDR   00C0H.4 A      328# 616 657 680 689 708 725 747 782 795
TB80 . . . . . . .  B ADDR   0098H.3 A      293#
TB81 . . . . . . .  B ADDR   0098H.3 A      302#
TCON . . . . . . .  D ADDR   0088H   A      98#
TF0. . . . . . . .  B ADDR   0088H.5 A      258#
TF1. . . . . . . .  B ADDR   0088H.7 A      256#
TF2. . . . . . . .  B ADDR   00C8H.7 A      341#
TF3. . . . . . . .  B ADDR   00C8H.7 A      349#
TF4. . . . . . . .  B ADDR   00C8H.7 A      357#
TH0. . . . . . . .  D ADDR   008CH   A      108#
TH1. . . . . . . .  D ADDR   008DH   A      109#
TI0. . . . . . . .  B ADDR   0098H.1 A      295#
TI1. . . . . . . .  B ADDR   0098H.1 A      304#
TIMER01_PAGE . . .  N NUMB   0000H   A      420#
TL0. . . . . . . .  D ADDR   008AH   A      104#
TL1. . . . . . . .  D ADDR   008BH   A      106#
TMOD . . . . . . .  D ADDR   0089H   A      99#
TMR2CF . . . . . .  D ADDR   00C9H   A      185#
TMR2CN . . . . . .  D ADDR   00C8H   A      182#
TMR2H. . . . . . .  D ADDR   00CDH   A      197#
TMR2L. . . . . . .  D ADDR   00CCH   A      194#
TMR2_PAGE. . . . .  N NUMB   0000H   A      430#
TMR3CF . . . . . .  D ADDR   00C9H   A      186#
TMR3CN . . . . . .  D ADDR   00C8H   A      183#
TMR3H. . . . . . .  D ADDR   00CDH   A      198#
TMR3L. . . . . . .  D ADDR   00CCH   A      195#
A51 MACRO ASSEMBLER  SMBUS                                                                11/19/2012 16:33:23 PAGE    19

TMR3_PAGE. . . . .  N NUMB   0001H   A      431#
TMR4CF . . . . . .  D ADDR   00C9H   A      187#
TMR4CN . . . . . .  D ADDR   00C8H   A      184#
TMR4H. . . . . . .  D ADDR   00CDH   A      199#
TMR4L. . . . . . .  D ADDR   00CCH   A      196#
TMR4_PAGE. . . . .  N NUMB   0002H   A      432#
TR0. . . . . . . .  B ADDR   0088H.4 A      259#
TR1. . . . . . . .  B ADDR   0088H.6 A      257#
TR2. . . . . . . .  B ADDR   00C8H.2 A      344#
TR3. . . . . . . .  B ADDR   00C8H.2 A      352#
TR4. . . . . . . .  B ADDR   00C8H.2 A      360#
TXBMT. . . . . . .  B ADDR   00F8H.1 A      411#
UART0_PAGE . . . .  N NUMB   0000H   A      423#
UART1_PAGE . . . .  N NUMB   0001H   A      424#
WCOL . . . . . . .  B ADDR   00F8H.6 A      406#
WDTCN. . . . . . .  D ADDR   00FFH   A      249#
WRI_ADD. . . . . .  N NUMB   00A0H   A      440# 625
XBR0 . . . . . . .  D ADDR   00E1H   A      221#
XBR1 . . . . . . .  D ADDR   00E2H   A      224#
XBR2 . . . . . . .  D ADDR   00E3H   A      225#
_SMBUS_RECEIVE . .  C ADDR   001BH   R   SEG=SMBCODE   64 554#
_SMBUS_SEND. . . .  C ADDR   0003H   R   SEG=SMBCODE   64 529#


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
