C51 COMPILER V7.05   PREFS                                                                 11/19/2012 16:11:18 PAGE 1   


C51 COMPILER V7.05, COMPILATION OF MODULE PREFS
OBJECT MODULE PLACED IN prefs.OBJ
COMPILER INVOKED BY: C:\SiLabs\MCU\IDEfiles\C51\BIN\C51.exe prefs.c DB OE BR

stmt level    source

   1          #include "c8051F120.h"
   2          #include <smbus.h>              // SMBus interface routines
*** WARNING C318 IN LINE 2 OF prefs.c: can't open file 'smbus.h'
   3          #include <prefs.h>              // preference routines and definitions
*** WARNING C318 IN LINE 3 OF prefs.h: can't open file 'types.h'
*** ERROR C141 IN LINE 6 OF PREFS.H: syntax error near 'uint16'
*** ERROR C129 IN LINE 6 OF PREFS.H: missing ';' before 'backupBlock'
   4          
   5          static bit backupPending;
   6          static uint8 idata count;
   7          
   8          #define COUNTINIT 78            // timer 3 overflow counter
   9          
  10          // Initialize Flash EEPROM for project.  This only need to be called once, or
  11          // if things get messed up.
  12          void blockInit(void)
  13          {
  14            uint8 i;
  15            {
  16              prefData xdata tmp;
  17              uint8 xdata *ptr = (uint8 xdata *)&tmp;
  18              for(i = sizeof(prefData); i--; *ptr++ = 0);
  19              smbus_send (0, sizeof(prefData), (uint8 *)&tmp);
  20            }
  21            {
  22              backupData xdata tmp;
  23              uint8 xdata *ptr = (uint8 xdata *)&tmp;
  24              for(i = sizeof(backupData); i--; *ptr++ = 0);
  25              smbus_send (sizeof(prefData), sizeof(backupData), (uint8 *)&tmp);
  26            }
  27          }
  28          
  29          // read preferences to Flash EEPROM
  30          void prefRead(prefData xdata *ptr)
  31          {
  32            smbus_send (0, sizeof(prefData), (uint8 *)ptr);
  33          }
  34           
  35          // write preferences from Flash EEPROM
  36          void prefWrite(prefData xdata *ptr)
  37          {
  38            smbus_receive (0, sizeof(prefData), (uint8 *)ptr);
  39          }
  40          
  41          // interrupt to track 5 second intervals
  42          void timer3ISR( void ) interrupt 14 {
  43            TF3 = 0;                      // reset the overflow bit
  44            if( backupPending == 0 ) {    // if not already pending
  45              --count;                    // adjust the count
  46              if( !count ) {              // when it's time, set the pending flag
  47                count = COUNTINIT;
  48                backupPending = 1;
  49              }
  50            }
  51          }
C51 COMPILER V7.05   PREFS                                                                 11/19/2012 16:11:18 PAGE 2   

  52          
  53          // read backup data from block
  54          void backupRead(uint16 block, backupData xdata* buffer)
  55          {
  56            smbus_receive (sizeof(prefData)+block*sizeof(block), 
  57                  sizeof(backupData), (uint8 *)buffer);
  58          }
  59          
  60          // Write backup data to block.  The internal write counts are updated and
  61          // if 0x80000 (~525,000) writes have occurred it skips to the next block.
  62          // Wiring will only occur if the backup timer has overflowed; when the write
  63          // does occur, it will reset the overflow flag
  64          //
  65          // returns:
  66          //  0 if backup block number has not changed
  67          //  1 if backup block number has changed
  68          uint8 backupWrite(uint16 block, backupData xdata* buffer)
  69          { 
  70            if( backupPending ) {         // if timer has expired, do a write
  71              uint8 status = 0;           // default status == no change
  72              buffer->backupCount++;      // update write count
  73              if( buffer->backupCount == 0) {
  74                buffer->backupCount2++;
  75                if(buffer->backupCount2 & 0x08) {
  76                  status = 1;             // write count has overflowed
  77                  block += 1;
  78                  buffer->backupCount = 0;
  79                  buffer->backupCount2 = 0;
  80                }
  81              }
  82              smbus_send (sizeof(prefData)+block*sizeof(block), sizeof(backupData), 
  83                  (uint8 *)buffer);
  84              backupPending = 0;
  85              return status;
  86            }
  87            return 0;
  88          }
  89          
  90          // Turn the backup timer on and off.  Turning on will fully configure the
  91          // Timer 3 to overflow; at 12.25MHz and RCAP3=0, it will overflow at about
  92          // 15.6Hz.  So in a 5 second period, there will be just under 78 interrupts.
  93          void backupTimer(uint8 enable)
  94          {
  95            SFRPAGE = 1;
  96            if( enable ) {
  97              backupPending = 0;          // clear pending flag
  98              count = COUNTINIT;          // reset overflow counter
  99              EIE2 |= 1;                  // enable interrupt
 100              TR3 = 1;                    // start timer
 101            } else {
 102              TR3 = 0;                    // stop timer (can leave interrupt enabled)
 103            }
 104            SFRPAGE = 0;
 105          }

C51 COMPILATION COMPLETE.  2 WARNING(S),  2 ERROR(S)
