C51 COMPILER V9.50a   SPI                                                                  11/26/2012 00:22:34 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN spi.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe spi.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          #include <c8051f120.h>          // get SFR declarations
   2          #include "spi.h"
   3          #include "types.h"
   4          
   5          // pin manip: manip them pins
   6          #define SCK_PORT    P0            //SPI SCK signal
   7          #define SCK_POS     0
   8          #define DO_PORT     P0            //SPI MISO signal
   9          #define DO_POS      1
  10          #define DI_PORT     P0            //SPI MOSI signal
  11          #define DI_POS      2
  12          #define CD_PORT     P2
  13          #define CD_POS      1
  14          #define CS_PORT     P2
  15          #define CS_POS      0
  16          
  17          // use these like SETB(SCK); etc.
  18          #define SETB(bit)   (bit##_PORT |= (1 << bit##_POS))    // set dat b
  19          #define CLRB(bit)   (bit##_PORT &= ~(1 << bit##_POS))   // clr dat b
  20          #define TOGB(bit)   (bit##_PORT ^= (1 << bit##_POS))    // tog dat b
  21          #define CHKB(bit)   (bit##_PORT & (1 << bit##_POS))     // chk dat b
  22                                                                  // where b == bit.
  23          //Pin declarations
  24          sbit CS     = P2^0;
  25          sbit CD     = P2^1;
  26          sbit DO     = P0^1;
  27          sbit DI     = P0^2;
  28          sbit SCK    = P0^0;
  29          
  30          //initializes the SPI module.  It does not need to set the SPI clock speed.
  31          void spiinit(void){
  32   1          SFRPAGE = 0;
  33   1          SPI0CFG |= 0x40;        //Enable master mode. (operate as master)
  34   1          NSSMD1 = 0; NSSMD0 = 0; //Setting 3-wire mode.
  35   1          SPIEN = 1;              //Enable the SPI module.
  36   1          SFRPAGE = 0x0F;
  37   1          XBR0 |= 0x03;           //Routing pins to SPI module via the crossbar.
  38   1          XBR1 |= 0x20;           //Enabling timer 2
  39   1          P0MDOUT |= 0x07;
  40   1          P2MDOUT |= 0x02;        //Setting push-pull mode for needed pins
  41   1          SFRPAGE = 0;
  42   1          return;
  43   1      }
  44          
  45          /*  returns the status of the CD signal from the microSD card adapter.
  46              It should return true (non-zero) when there is a card in the adapter. */
  47          uint8_t spicardpresent(){
  48   1          return (uint8_t) CHKB(CD);   //Assuming is set high when card is in adapter.
  49   1      }
  50          
  51          /*  The remaining procedures are called from the SD card module (note, these
  52              procedures all have underscores in their names) */
  53          
  54          //sets the SPI clock speed. If spd is 0, the clock is set to approximately 400KHz; otherwise the clock is 
             -set to maximum speed.
C51 COMPILER V9.50a   SPI                                                                  11/26/2012 00:22:34 PAGE 2   

  55          void spi_set_divisor(uint8_t spd){
  56   1          SFRPAGE = 0;
  57   1          SPI0CKR = spd ? 0 : 0x0F;
  58   1          return;
  59   1      }
  60          
  61          //asserts the CS chip select signal line (sets it low).
  62          void spi_cs_assert(){
  63   1          CS = 0;
  64   1          return;
  65   1      }
  66          
  67          //de-asserts the CS chip select signal line (sets it high).
  68          void spi_cs_deassert(){
  69   1          CS = 1;
  70   1          return;
  71   1      }
  72          
  73          //sends one byte over the SPI bus.
  74          void spi_send_byte(uint8_t input){
  75   1          SPIF = 0;
  76   1          SPI0DAT = input;
  77   1          while(!SPIF);
  78   1          return;
  79   1      }
  80          
  81          //receives one byte over the SPI bus
  82          uint8_t spi_rcv_byte(){
  83   1          SPIF = 0;
  84   1          SPI0DAT = 0xFF;
  85   1          while(!SPIF);
  86   1          return SPI0DAT;
  87   1      }
  88          
  89          //sends multiple bytes (normally a SD card sector) over the SPI bus.
  90          void spi_rcv_buffer(uint16_t len, uint8_t xdata *buffer){
  91   1          int i;
  92   1          spi_cs_assert();
  93   1          for(i = 0; i < len; i++)
  94   1              buffer[i] = spi_rcv_byte();
  95   1          spi_cs_deassert();
  96   1          return;
  97   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    128    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
