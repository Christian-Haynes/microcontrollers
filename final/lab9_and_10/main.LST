C51 COMPILER V9.50a   MAIN                                                                 11/30/2012 21:33:12 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\SiLabs\MCU\IDEfiles\C51\BIN\C51.exe main.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          #include <c8051f120.h>           // Get SFR declarations
   2          #include "types.h"
   3          #include "spi.h"
   4          #include "lcd.h"
   5          #include "sd.h"
   6          #include "dac.h"
   7          #include "readdir.h"
   8          #include "utils.h"
   9          #include "wav.h"
  10          
  11          //#pragma code                        // Include ASM in .LST file
  12          void kbinit ( void );
  13          uint8_t kbcheck ( void );
  14          void dacinit ( void );
  15          void itoa(uint8_t i, char *a);
  16          
  17          extern uint8_t  xdata numSongs;      // Number of songs found
  18          extern uint32_t xdata songSector[32];// Starting sector of each file.
  19          
  20          int main(void){
  21   1      char idata foo2;
  22   1          wav_header xdata *header_ptr;
  23   1          uint32_t xdata current_sector = songSector[0];
  24   1          int i = 0, ping, pong;
  25   1          uint32_t bytestoplay, bytesread;
  26   1          uint8_t xdata buffer[2][512];
  27   1          char itoa_buf[4] = "\0\0\0\0";
  28   1          uint32_t increment = 1;
  29   1              uint16_t tmp;
  30   1          uint8_t displayToggle = 0;      // Because too lazy to make a bit a redo library
  31   1          //init procedures
  32   1          SFRPAGE = 0x0F;
  33   1          WDTCN = 0xDE;                   // Disable watchdog timer
  34   1          WDTCN = 0xAD;
  35   1          OSCICN = 0xC2;
  36   1          XBR2 |= 0x40;                   // Enable crossbar and weak pull-up
  37   1          EA = 1;                         // Enable all interrupts
  38   1          spi_set_divisor(0);
  39   1          spiinit();
  40   1          lcdinit();
  41   1          kbinit();
  42   1          dacinit();
  43   1          dac2init();
  44   1          SFRPAGE = 0;
  45   1              DACnCN = 0x9A;
  46   1          SFRPAGE = 1;
  47   1          DACnCN = 0x9A;
  48   1          dacrate(11025);
  49   1          dacstereo(0);                   // Set number of channels to mono
  50   1          dacvolume(1);
  51   1      /*
  52   1          while(1) {
  53   1              uint8_t temp[1];
  54   1              PCON |= 1;
  55   1              temp[0] = kbcheck();
C51 COMPILER V9.50a   MAIN                                                                 11/30/2012 21:33:12 PAGE 2   

  56   1              if (temp[0] == 13) {
  57   1                  lcdclear();
  58   1                  lcdpos(0,0);
  59   1              }
  60   1              else if (temp[0] == 8) {
  61   1                  _lcdcmd(0x10);
  62   1                  lcdwrite(" ");
  63   1                  _lcdcmd(0x10);
  64   1              }
  65   1              else if (temp[0] != 255)
  66   1                  lcdwrite(temp);
  67   1          }
  68   1      */
  69   1      
  70   1          while(1){
  71   2              if(!spicardpresent()){
  72   3                  lcdpos(0,0);
  73   3                  lcdwrite("Insert microSD");
  74   3                  lcdpos(1,0);
  75   3                  lcdwrite("card...");    // Only write once.
  76   3              }
  77   2              while(!spicardpresent());   // Wait until card is detected
  78   2              if(!microSDinit()){         // If initialization fails, print error.
  79   3                  lcdclear();
  80   3                  lcdpos(0,0);
  81   3                  lcdwrite("ERROR: microSD");
  82   3                  lcdpos(1,0);
  83   3                  lcdwrite("failure.");
  84   3              } else {
  85   3                  spi_set_divisor(1);     // Set to max speed after initialisation
  86   3                  readdir();              // Fill in numSongs and songSector[32]
  87   3                  while(spicardpresent()){
  88   4                      PCON |= 1;          // Power management setting
  89   4                      for(i; i<numSongs; i++){
  90   5                          current_sector = songSector[i];
  91   5                          microSDread(current_sector, (uint8_t *) header_ptr);
  92   5                          switch(ntohs(header_ptr->numChannels)){
  93   6                              case 2:
  94   6                                  dacstereo(1); // Stereo
  95   6                                  break;
  96   6                              case 1:
  97   6                              default:
  98   6                                  dacstereo(0); // Mono
  99   6                                  break;
 100   6                          }
 101   5                                              tmp = ntohl(header_ptr->sampleRate);
 102   5                                              dacrate(tmp);
 103   5                          //dacrate(ntohs(header_ptr->sampleRate));
 104   5                          bytestoplay = ntohl(header_ptr->subchunk2Size);
 105   5                          lcdclear();
 106   5                          lcdpos(0,0);
 107   5                          itoa(i, itoa_buf);
 108   5                          lcdwrite(itoa_buf);
 109   5                          lcdwrite(":");
 110   5                          lcdwrite(header_ptr->artist);
 111   5                          lcdpos(1,0);
 112   5                          lcdwrite(header_ptr->title);
 113   5                          if(!dacbusy()){
 114   6                              dacplay(404, (uint8_t xdata *)(header_ptr + 108));
 115   6                              //RIFF header + artist&title strings out of 512 B block
 116   6                          }
 117   5                          bytesread = 404;
C51 COMPILER V9.50a   MAIN                                                                 11/30/2012 21:33:12 PAGE 3   

 118   5                          bytestoplay -= 404;
 119   5                          ping = 0;
 120   5                          microSDread(current_sector + bytesread, buffer[pong]);
 121   5                          increment = 1;
 122   5                          // Well, we stop playing when bytestoplay = 0. If not, read
 123   5                          while(bytestoplay > 0){
 124   6                              if(!dacbusy()){
 125   7                                  if(bytestoplay >= 512){
 126   8                                      dacplay(512, buffer[pong]);
 127   8                                      ping = pong;
 128   8                                      pong = 1-ping;  // To keep ahead of the DAC
 129   8                                      bytestoplay -= 512;
 130   8                                      bytesread += 512;
 131   8                                  }else{
 132   8                                      dacplay(bytestoplay, buffer[pong]);
 133   8                                      bytestoplay = 0; // Done playing song.
 134   8                                  }
 135   7                                  microSDread(current_sector + increment, buffer[ping]);
 136   7                                  ++increment;
 137   7                                  switch(kbcheck()){
 138   8                                      case 'd':
 139   8                                      case 'D':
 140   8                                          displayToggle = displayToggle ? 0 : 1;
 141   8                                          displayToggle ? \
*** ERROR C141 IN LINE 141 OF main.c: syntax error near 'lcdpos'
*** ERROR C141 IN LINE 141 OF main.c: syntax error near ':'
 142   8                                              lcdwrite(header_ptr->artist)\
 143   8                                              lcdpos(1,0) :\
 144   8                                          lcdwrite("");
 145   8                                          break;
 146   8                                      case '+':
 147   8                                      case '=':
 148   8                                          dacvolume(1);
 149   8                                          break;
 150   8                                      case '-':
 151   8                                      case '_':
 152   8                                          dacvolume(0);
 153   8                                          break;
 154   8                                      case '>':
 155   8                                      case '.':
 156   8                                          dacbalance(0);
 157   8                                          break;
 158   8                                      case '<':
 159   8                                      case ',':
 160   8                                          dacbalance(1);
 161   8                                          break;
 162   8                                      case 'n':
 163   8                                      case 'N':
 164   8                                          ++i;
 165   8                                          i %= numSongs-1; //next song with wrap around
 166   8                                          break;
 167   8                                      case 'l':
 168   8                                      case 'L':
 169   8                                          --i;
 170   8                                          i %= numSongs-1; //previous song with wrap
 171   8                                          break;
 172   8                                      case '0':
 173   8                                      case ')':
 174   8                                          i = 0;
 175   8                                          break;
 176   8                                      case '1':
 177   8                                      case '!':
C51 COMPILER V9.50a   MAIN                                                                 11/30/2012 21:33:12 PAGE 4   

 178   8                                          i = 1;
 179   8                                          break;
 180   8                                      case '2':
 181   8                                      case '@':
 182   8                                          i = 2;
 183   8                                          break;
 184   8                                      case '3':
 185   8                                      case '#':
 186   8                                          i = 3;
 187   8                                          break;
 188   8                                      case '4':
 189   8                                      case '$':
 190   8                                          i = 4;
 191   8                                          break;
 192   8                                      case '5':
 193   8                                      case '%':
 194   8                                          i = 5;
 195   8                                          break;
 196   8                                      case '6':
 197   8                                      case '^':
 198   8                                          i = 6;
 199   8                                          break;
 200   8                                      case '7':
 201   8                                      case '&':
 202   8                                          i = 7;
 203   8                                          break;
 204   8                                      case '8':
 205   8                                      case '*':
 206   8                                          i = 8;
 207   8                                          break;
 208   8                                      case '9':
 209   8                                      case '(':
 210   8                                          i = 9;
 211   8                                          break;
 212   8                                      default:
 213   8                                          break;
 214   8                                  }
 215   7                              }
 216   6                          }
 217   5                      }
 218   4                  }
 219   3              }
 220   2          }
 221   1          return 0;
 222   1      }
 223          
 224          void itoa(uint8_t i, char *a) {
 225   1          uint8_t p = 0;
 226   1          // char* a = "\0\0\0\0";
 227   1      
 228   1          if (i > 99) {
 229   2              a[p++] = i / 100 + 0x30;
 230   2              i %= 100;
 231   2          }
 232   1          if (i > 9) {
 233   2              a[p++] = i /= 10 + 0x30;
 234   2              i %= 10;
 235   2          }
 236   1          a[p] = i + 0x30;
 237   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  2 ERROR(S)
