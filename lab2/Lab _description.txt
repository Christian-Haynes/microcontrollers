
      Lab 2: MergeSort Algorithm

Write a subroutine that takes a list of /n/ unsigned 8-bit numbers and
sorts them in ascending order using MergeSort.  The basic idea of the
MergeSort algorithm is this:

 1. Split the list in half
 2. Sort each half of the list
 3. Merge the two sorted list together

Of course, to sort each half of of the you will recursively call
MergeSort.  The termination criteria for the recursion is a list of size
zero or one.

MergeSort is not an in-place sort like some other sorting algorithms.
 The split operation usually copies each half of the list into two new
lists, and then merges these sorted lists back into the memory of the
original list.  Since memory is limited in a microcontroller and copying
data can be slow, an optimization can be made which only requires half
the amount of extra memory.  If the list is to be split at item n/2,
with items 0..n/2-1 going into one list (the "first" list) and items
n/2..n-1 going into the other list (the "second list"), we only copy the
create and copy the items in second list.  The items in first list are
sorted in-place, and then the second list is merged back into the first
list starting with the largest items (which after sorting are at the end
of the first and second lists).  The pseudo code for the merge would
look something like this:

|merge(list1,list2):
||  i = len(list1)+len(list2)-1 // index of last item in original list
||  j = len(list1)-1            // index of last item in first list
||  k = len(list2)-1            // index of last item in second list
||                        
||  while j >= 0 and k >= 0:   // while both sub-lists contain items
||    if list1[j] > list2[k]:  // if larger entry is in first list
||      item = list1[j]        //   save item from first list
||      j -= 1                 //   adjust index for first list
||    else:                    // else larger entry is in second list
||      item = list2[k]        //   save item from second list
||      k -= 1                 //   adjust index for second list
||    list1[i] = item          // place item at end of original list
||    i -= 1                   // check it off ||
||
  while k >= 0:              // until second list is empty
||    list1[i] = list2[k]      // copy items into the original list
||    i -= 1 
||    k -= 1 |

Since we do not have access to dynamic memory in assembly language, we
will "cheat" and allocate some extra memory to use for the copy of the
list.  There is a challenge, however;  since your code is recursive, you
cannot simply hard code the copy to start at the same address each time.
 Instead, each time we call MergeSort it needs to track what memory has
already been used and choose the next free block of memory.   

Your subroutine will be passed the starting address of the list in R0
and the number of items in the list in R7.  It will also be passed the
starting address of the "scratch" memory for the copied list in R1.
 These registers, and any other registers you use within the subroutine
need to be saved on the stack by the subroutine.

To test the program, write a main routine which 

  * initializes the stack,
  * copies the data to sort into internal memory,
  * sets up registers R0/R1/R7
  * and calls your sort subroutine.

Use an sjmp $ to "halt" after the call to the subroutine.

Remember that like Lab 1, you will develop and test this program using
EdSim51. 

